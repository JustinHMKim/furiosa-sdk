<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="nux_8h" kind="file" language="C++">
    <compoundname>nux.h</compoundname>
    <includes local="no">stdarg.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdlib.h</includes>
    <incdepgraph>
      <node id="3">
        <label>stdbool.h</label>
      </node>
      <node id="2">
        <label>stdarg.h</label>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
      <node id="1">
        <label>C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h</label>
        <link refid="nux_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="nux_8h_1a681b66b42eec28d72c6f598a35bb6744" prot="public" static="no">
        <name>furiosa_libnux_bindings_h</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="6" column="9" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="6" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="nux_8h_1ae3996976d8ffb3e58d88f58227473f8e" prot="public" static="no" strong="no">
        <type></type>
        <name>Axis</name>
        <enumvalue id="nux_8h_1ae3996976d8ffb3e58d88f58227473f8ea7cb7076bf378f9df948edffa5ab2f68e" prot="public">
          <name>axis_width</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1ae3996976d8ffb3e58d88f58227473f8eac5b20039b6ffebcce9a57f3e8a52a32e" prot="public">
          <name>axis_height</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1ae3996976d8ffb3e58d88f58227473f8ea1d9228549e8e981a783052c0e6404c95" prot="public">
          <name>axis_channel</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>For convolution weights, this axis is also known as an input channel. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1ae3996976d8ffb3e58d88f58227473f8ea120cc55f68810d6249094cff3b24fd31" prot="public">
          <name>axis_batch</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>For convolution weights, this axis is also known as an output channel or feature map. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1ae3996976d8ffb3e58d88f58227473f8ea6705276bc6fa76c2f7464a58234d7f21" prot="public">
          <name>axis_width_outer</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1ae3996976d8ffb3e58d88f58227473f8eaa6b8011b2b1fc2d8888c3242b4c84da1" prot="public">
          <name>axis_height_outer</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1ae3996976d8ffb3e58d88f58227473f8eaf994c2f5f4264dd6dad6299704d36da8" prot="public">
          <name>axis_channel_outer</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1ae3996976d8ffb3e58d88f58227473f8eaae8d7d5a3e6713beca2c4c1839482cd1" prot="public">
          <name>axis_batch_outer</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1ae3996976d8ffb3e58d88f58227473f8ea2fae774f747ab177f7dc750ea0a87ed6" prot="public">
          <name>axis_unknown</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="15" column="1" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="15" bodyend="31"/>
      </memberdef>
      <memberdef kind="enum" id="nux_8h_1a371006fb2e9b32996c00702ebe110510" prot="public" static="no" strong="no">
        <type></type>
        <name>TensorDataType</name>
        <enumvalue id="nux_8h_1a371006fb2e9b32996c00702ebe110510a51ddd6299a05a2bb95943572e20a9401" prot="public">
          <name>tensor_data_type_float32</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1a371006fb2e9b32996c00702ebe110510acbae55d9a4c3f4153c6054225e90a2e8" prot="public">
          <name>tensor_data_type_uint8</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1a371006fb2e9b32996c00702ebe110510a60207aaf27dbd459c39aea7dfdf2a770" prot="public">
          <name>tensor_data_type_int8</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1a371006fb2e9b32996c00702ebe110510ae10f085574335f522e22809c1fd59436" prot="public">
          <name>tensor_data_type_int32</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Represent tensor data type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="36" column="1" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="36" bodyend="41"/>
      </memberdef>
      <memberdef kind="enum" id="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" prot="public" static="no" strong="no">
        <type></type>
        <name>nux_error_t</name>
        <enumvalue id="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a9ed6c5025d2d89b340cd46185d394b3a" prot="public">
          <name>nux_error_t_success</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>When a function call is successful </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03afe4023c8cd3c553d0ac0787a403a18ca" prot="public">
          <name>nux_error_t_nux_creation_failed</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>When <ref refid="nux_8h_1ae68b58f43d3a93f6edf9d0c0bea56e6b" kindref="member">create_nux</ref> fails to initialize </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a29116f70ad490400f07af16b05441492" prot="public">
          <name>nux_error_t_model_deploy_failed</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>When deploying a model to an executor fails. See also <ref refid="nux_8h_1a0a8c9bb5290414fa8c50a4225a41cd68" kindref="member">nux_create_sync_model</ref>, <ref refid="nux_8h_1a0842cc2b55b567e39a175b287690b833" kindref="member">nux_create_task_model</ref> for more details. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03ac6bd66738165c430a8f4651d1f399534" prot="public">
          <name>nux_error_t_model_execution_failed</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>When running an inference task fails. See also <ref refid="nux_8h_1aeb9dee222b8b07f4ae10e6e32b99301f" kindref="member">model_run</ref>, <ref refid="nux_8h_1af9d6c581a36012b468636777dd4eaca1" kindref="member">task_execute</ref> for more details. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03ad4ef5746aff7a8084e31f55d96124756" prot="public">
          <name>nux_error_t_invalid_input_index</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>When the given index of an input tensor is invalid. See also <ref refid="nux_8h_1a80b727e0c054b2db830808b882f68305" kindref="member">model_input_tensor</ref> for more details. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a3c56a6ebe0ce3c87f20317f37e8a58d1" prot="public">
          <name>nux_error_t_invalid_output_index</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>When the given index of an output tensor is invalid. See also <ref refid="nux_8h_1af8a884f8271dddc703f18103a56157ba" kindref="member">model_output_tensor</ref> for more details. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03acd4211b3688454861ac4982454dc3350" prot="public">
          <name>nux_error_t_invalid_buffer</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>When a data buffer is invalid. See <ref refid="nux_8h_1a3139df500cc7640a1516cafae8f3818d" kindref="member">tensor_set_buffer</ref> for more details. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a47d1dc88180bfb3db50fa2a0ad6cc5de" prot="public">
          <name>nux_error_t_invalid_inputs</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>When the input tensors are invalid </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a21ca1301b3f25e4c706ae8bdd2260681" prot="public">
          <name>nux_error_t_invalid_outputs</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>When the output tensors are invalid </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a86d8ecfc91eb52f6dcb05b674fc18f8e" prot="public">
          <name>nux_error_t_get_task_failed</name>
          <initializer>= 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>When <ref refid="nux_8h_1a2a325d501f34c8d3047b17a5acd8f54c" kindref="member">task_model_get_task</ref> or <ref refid="nux_8h_1a7c462db4b3b7d698d08585e84f39dce7" kindref="member">task_model_try_get_task</ref> fails to return an available task slot. This error code can have different meanings in both functions. Please see <ref refid="nux_8h_1a2a325d501f34c8d3047b17a5acd8f54c" kindref="member">task_model_get_task</ref> and <ref refid="nux_8h_1a7c462db4b3b7d698d08585e84f39dce7" kindref="member">task_model_try_get_task</ref> for more details. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a4bde5d51d7f7f1d68d84bfc3f79b5168" prot="public">
          <name>nux_error_t_dump_profile_failed</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>reserved </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a654f467bd6d8eae2cbf4830491ee5b36" prot="public">
          <name>nux_error_t_queue_wait_timeout</name>
          <initializer>= 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>When waiting for completion queue is timed out </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a14535aa4d38445a1bbcc92f5e6115d2a" prot="public">
          <name>nux_error_t_queue_no_data</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>When there&apos;s no data in completion queue </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a9822b7ab8a5770ab237a29211180f7f8" prot="public">
          <name>nux_error_t_incompatible_model</name>
          <initializer>= 13</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>When loading a model image fails </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a9f65448b07b3b88d40d94c60b1ad29b5" prot="public">
          <name>nux_error_t_compilation_failed</name>
          <initializer>= 14</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>When the compiler fails to transform a given model image to a binary for NPU </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03aff4cadf47af985723a53d8fe5f919116" prot="public">
          <name>nux_error_t_internal_error</name>
          <initializer>= 15</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Internal error </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a3302110dad3c6b57d35cb866540ee3d9" prot="public">
          <name>nux_error_t_invalid_yaml</name>
          <initializer>= 16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Invalid yaml syntax </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03ac3ab8fc8951b8e4c786ea31578c37142" prot="public">
          <name>nux_error_t_incompatible_api_client_error</name>
          <initializer>= 17</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>incompatible api client error </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03aa55655f1ae20a4025cc2e3b0fc08d548" prot="public">
          <name>nux_error_t_api_client_init_failed</name>
          <initializer>= 18</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>when api client fails to initialize </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a5046069a83eed49b221d31082ebcf22b" prot="public">
          <name>nux_error_t_no_api_key</name>
          <initializer>= 19</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No API Key </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a7ccdeba708b5a2946d3d1f0a621f30f4" prot="public">
          <name>nux_error_t_null_pointer_exception</name>
          <initializer>= 20</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Null pointer exception </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Represent a return status of a function that can fail. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="46" column="1" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="46" bodyend="137"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="nux_8h_1a5bd8a6aaa5c2220ca1e5703255fad8d3" prot="public" static="no">
        <type>enum <ref refid="nux_8h_1ae3996976d8ffb3e58d88f58227473f8e" kindref="member">Axis</ref></type>
        <definition>typedef enum Axis Axis</definition>
        <argsstring></argsstring>
        <name>Axis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="31" column="6"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1a68bc22b91cf23fca3c489bfc55d97b6c" prot="public" static="no">
        <type>enum <ref refid="nux_8h_1a371006fb2e9b32996c00702ebe110510" kindref="member">TensorDataType</ref></type>
        <definition>typedef enum TensorDataType TensorDataType</definition>
        <argsstring></argsstring>
        <name>TensorDataType</name>
        <briefdescription>
<para>Represent tensor data type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="41" column="16"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1ade952388e21da3a09cdcef180e1b8846" prot="public" static="no">
        <type>enum <ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref></type>
        <definition>typedef enum nux_error_t nux_error_t</definition>
        <argsstring></argsstring>
        <name>nux_error_t</name>
        <briefdescription>
<para>Represent a return status of a function that can fail. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="137" column="13"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1ae09f8d965dfcff84b67c46649a327e11" prot="public" static="no">
        <type>struct BlockingSession</type>
        <definition>typedef struct BlockingSession BlockingSession</definition>
        <argsstring></argsstring>
        <name>BlockingSession</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="1" column="0" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1abcf58bd7a84492e3fbca5cac05ee5cf7" prot="public" static="no">
        <type>struct CompletionQueue_ContextPtr</type>
        <definition>typedef struct CompletionQueue_ContextPtr CompletionQueue_ContextPtr</definition>
        <argsstring></argsstring>
        <name>CompletionQueue_ContextPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="1" column="0" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1abcd4549833a89453835e140c870d93bc" prot="public" static="no">
        <type>struct Model</type>
        <definition>typedef struct Model Model</definition>
        <argsstring></argsstring>
        <name>Model</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="1" column="0" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1aa958a4d7291f128984712c3a6f5de32b" prot="public" static="no">
        <type>struct Nux</type>
        <definition>typedef struct Nux Nux</definition>
        <argsstring></argsstring>
        <name>Nux</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="1" column="0" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1a494196375804bddf6a395336ae8e421e" prot="public" static="no">
        <type>struct NuxModel</type>
        <definition>typedef struct NuxModel NuxModel</definition>
        <argsstring></argsstring>
        <name>NuxModel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="1" column="0" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1a429feb7ac4e86fef4aaad420b410f580" prot="public" static="no">
        <type>struct OpaqueTensor</type>
        <definition>typedef struct OpaqueTensor OpaqueTensor</definition>
        <argsstring></argsstring>
        <name>OpaqueTensor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="1" column="0" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1af40f150c63b3221771c0b0f7a0b3970c" prot="public" static="no">
        <type>struct SessionOptions</type>
        <definition>typedef struct SessionOptions SessionOptions</definition>
        <argsstring></argsstring>
        <name>SessionOptions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="1" column="0" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1ac5e486ae1ad7b7c82ab40678b63963ca" prot="public" static="no">
        <type>struct Submitter_ContextPtr</type>
        <definition>typedef struct Submitter_ContextPtr Submitter_ContextPtr</definition>
        <argsstring></argsstring>
        <name>Submitter_ContextPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="1" column="0" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1a1d107d116293b1dddca4e5d3d2898d00" prot="public" static="no">
        <type>struct Task</type>
        <definition>typedef struct Task Task</definition>
        <argsstring></argsstring>
        <name>Task</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="1" column="0" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1a8b40e325bbe7a15aa90ca20773222b51" prot="public" static="no">
        <type>struct TaskModel</type>
        <definition>typedef struct TaskModel TaskModel</definition>
        <argsstring></argsstring>
        <name>TaskModel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="1" column="0" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1afa084064407a1cc227720de3acc637b1" prot="public" static="no">
        <type>struct TensorArray</type>
        <definition>typedef struct TensorArray TensorArray</definition>
        <argsstring></argsstring>
        <name>TensorArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="1" column="0" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1af6dc7410f18450866128d43def497145" prot="public" static="no">
        <type>struct TensorDesc</type>
        <definition>typedef struct TensorDesc TensorDesc</definition>
        <argsstring></argsstring>
        <name>TensorDesc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="1" column="0" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1a8aaa845d62c8e2ba0b08492ad4312b4a" prot="public" static="no">
        <type>struct Nux *</type>
        <definition>typedef struct Nux* nux_handle_t</definition>
        <argsstring></argsstring>
        <name>nux_handle_t</name>
        <briefdescription>
<para>Nux handle. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="nux_8h_1ae68b58f43d3a93f6edf9d0c0bea56e6b" kindref="member">create_nux</ref> initializes an instance of <ref refid="nux_8h_1a8aaa845d62c8e2ba0b08492ad4312b4a" kindref="member">nux_handle_t</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="168" column="18" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1aed964c658135b64a4615538f6d3fe673" prot="public" static="no">
        <type>uintptr_t</type>
        <definition>typedef uintptr_t nux_buffer_len_t</definition>
        <argsstring></argsstring>
        <name>nux_buffer_len_t</name>
        <briefdescription>
<para>Byte length of a data buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="173" column="19" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1a2658304913df93888e11892bc40ea34f" prot="public" static="no">
        <type>struct Model *</type>
        <definition>typedef struct Model* nux_sync_model_t</definition>
        <argsstring></argsstring>
        <name>nux_sync_model_t</name>
        <briefdescription>
<para>Handle of a synchronous model. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="nux_8h_1a0a8c9bb5290414fa8c50a4225a41cd68" kindref="member">nux_create_sync_model</ref> initializes an instance of <ref refid="nux_8h_1a2658304913df93888e11892bc40ea34f" kindref="member">nux_sync_model_t</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="180" column="20" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1a94b4b218d26fecf1b1a4e3b102484b4c" prot="public" static="no">
        <type>struct OpaqueTensor *</type>
        <definition>typedef struct OpaqueTensor* nux_tensor_t</definition>
        <argsstring></argsstring>
        <name>nux_tensor_t</name>
        <briefdescription>
<para>Handle of tensor. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="nux_8h_1a80b727e0c054b2db830808b882f68305" kindref="member">model_input_tensor</ref> or <ref refid="nux_8h_1af8a884f8271dddc703f18103a56157ba" kindref="member">model_output_tensor</ref> returns an instance of <ref refid="nux_8h_1a94b4b218d26fecf1b1a4e3b102484b4c" kindref="member">nux_tensor_t</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="187" column="27" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1af81df491b6c3789d07e01f08a7bebca7" prot="public" static="no">
        <type>uint8_t *</type>
        <definition>typedef uint8_t* nux_buffer_t</definition>
        <argsstring></argsstring>
        <name>nux_buffer_t</name>
        <briefdescription>
<para>Pointer to a data buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>In Nux, it is commonly used to contain any kind of binary data like ENF binary, or a data buffer of input/output tensors. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="195" column="17" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1a801df2cce56ae7c45688df15e2960019" prot="public" static="no">
        <type>uintptr_t</type>
        <definition>typedef uintptr_t RequestId</definition>
        <argsstring></argsstring>
        <name>RequestId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="197" column="19" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1a85c8a2e016cba474b1d72a43be2658b8" prot="public" static="no">
        <type>RequestId</type>
        <definition>typedef RequestId nux_request_id_t</definition>
        <argsstring></argsstring>
        <name>nux_request_id_t</name>
        <briefdescription>
<para>Identifier to distinguish tasks in a task model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="202" column="19" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1a84e308e70103e31e4f1cbe9defc908e0" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t OutputIndex</definition>
        <argsstring></argsstring>
        <name>OutputIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="204" column="18" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1a2a467bd31283be58e2c7e1f081d39389" prot="public" static="no">
        <type>OutputIndex</type>
        <definition>typedef OutputIndex nux_output_index_t</definition>
        <argsstring></argsstring>
        <name>nux_output_index_t</name>
        <briefdescription>
<para>Index of an output tensor, used in task model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="209" column="21" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1a4bf21e12388c35aa93937f3ef11b2d58" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* nux_output_callback_t) (nux_request_id_t, nux_output_index_t, nux_buffer_t, nux_buffer_len_t)</definition>
        <argsstring>)(nux_request_id_t, nux_output_index_t, nux_buffer_t, nux_buffer_len_t)</argsstring>
        <name>nux_output_callback_t</name>
        <briefdescription>
<para>Callback function called per tensor output when a task of a task model is completed. </para>
        </briefdescription>
        <detaileddescription>
<para>For example, if one model has 2 output tensors, this function will be called 2 times upon each task&apos;s completion. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="218" column="9" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1a1ef90898a20c09267ebb0cd6ba4bc005" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* nux_error_callback_t) (nux_request_id_t, enum nux_error_t)</definition>
        <argsstring>)(nux_request_id_t, enum nux_error_t)</argsstring>
        <name>nux_error_callback_t</name>
        <briefdescription>
<para>Callback function called when a task fails to complete. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="223" column="9" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1ac59137484096663432e27c8e85d74eb4" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* nux_finish_callback_t) (nux_request_id_t)</definition>
        <argsstring>)(nux_request_id_t)</argsstring>
        <name>nux_finish_callback_t</name>
        <briefdescription>
<para>Callback function which is finally called when a task is completed. </para>
        </briefdescription>
        <detaileddescription>
<para>Unlike <ref refid="nux_8h_1a4bf21e12388c35aa93937f3ef11b2d58" kindref="member">nux_output_callback_t</ref>, this callback function is called only once after <ref refid="nux_8h_1a4bf21e12388c35aa93937f3ef11b2d58" kindref="member">nux_output_callback_t</ref> is called for all output tensors. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="231" column="9" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1a2a9df2cca7933d9a992ff02f18f7b32e" prot="public" static="no">
        <type>struct TaskModel *</type>
        <definition>typedef struct TaskModel* nux_task_model_t</definition>
        <argsstring></argsstring>
        <name>nux_task_model_t</name>
        <briefdescription>
<para>Handle of a task model. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="nux_8h_1a0842cc2b55b567e39a175b287690b833" kindref="member">nux_create_task_model</ref> creates an instance of <ref refid="nux_8h_1a2a9df2cca7933d9a992ff02f18f7b32e" kindref="member">nux_task_model_t</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="238" column="24" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1acce67ab377db47043a0ae0f1e50e38e1" prot="public" static="no">
        <type>struct Task *</type>
        <definition>typedef struct Task* nux_task_t</definition>
        <argsstring></argsstring>
        <name>nux_task_t</name>
        <briefdescription>
<para>Handle of a task of a task model. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="nux_8h_1a2a325d501f34c8d3047b17a5acd8f54c" kindref="member">task_model_get_task</ref> or <ref refid="nux_8h_1a7c462db4b3b7d698d08585e84f39dce7" kindref="member">task_model_try_get_task</ref> returns an instance of <ref refid="nux_8h_1acce67ab377db47043a0ae0f1e50e38e1" kindref="member">nux_task_t</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="245" column="19" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1a0c7fb2387ac54ca2d3778c5ad4e88b98" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t InputIndex</definition>
        <argsstring></argsstring>
        <name>InputIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="247" column="18" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1a7cb3fb8e947fec1309ec86fe1a5cfe9a" prot="public" static="no">
        <type>InputIndex</type>
        <definition>typedef InputIndex nux_input_index_t</definition>
        <argsstring></argsstring>
        <name>nux_input_index_t</name>
        <briefdescription>
<para>Index of an input tensor, used in task model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="252" column="20" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1ad152e5d6c7a9d7057a1a39618f570043" prot="public" static="no">
        <type>struct SessionOptions *</type>
        <definition>typedef struct SessionOptions* nux_session_option_t</definition>
        <argsstring></argsstring>
        <name>nux_session_option_t</name>
        <briefdescription>
<para>Session option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="257" column="29" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1acd038b1ce951e25bc8e9d0e9b33393c8" prot="public" static="no">
        <type>const struct BlockingSession *</type>
        <definition>typedef const struct BlockingSession* nux_session_t</definition>
        <argsstring></argsstring>
        <name>nux_session_t</name>
        <briefdescription>
<para>Session. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="262" column="36" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1afb640feeb31a1f4c6a7d0277d8767c36" prot="public" static="no">
        <type>const struct NuxModel *</type>
        <definition>typedef const struct NuxModel* nux_model_t</definition>
        <argsstring></argsstring>
        <name>nux_model_t</name>
        <briefdescription>
<para>Model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="267" column="29" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1a2f341727cc29901eee60cf6dc703d4d2" prot="public" static="no">
        <type>struct TensorArray *</type>
        <definition>typedef struct TensorArray* nux_tensor_array_t</definition>
        <argsstring></argsstring>
        <name>nux_tensor_array_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="269" column="26" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1a2d592d21337f153b24799e8f565a7187" prot="public" static="no">
        <type>struct Submitter_ContextPtr *</type>
        <definition>typedef struct Submitter_ContextPtr* nux_async_session_t</definition>
        <argsstring></argsstring>
        <name>nux_async_session_t</name>
        <briefdescription>
<para>Async Session. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="274" column="35" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1a1e7210100270e14e066156f45a7fe5b6" prot="public" static="no">
        <type>struct CompletionQueue_ContextPtr *</type>
        <definition>typedef struct CompletionQueue_ContextPtr* nux_completion_queue_t</definition>
        <argsstring></argsstring>
        <name>nux_completion_queue_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="276" column="41" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1af748dc0957775e74dde2c99baf34d19c" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* nux_context_t</definition>
        <argsstring></argsstring>
        <name>nux_context_t</name>
        <briefdescription>
<para>Context pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="281" column="14" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1a9d5ab6277eb5b7875699cfc28456268b" prot="public" static="no">
        <type>const struct TensorDesc *</type>
        <definition>typedef const struct TensorDesc* nux_tensor_desc_t</definition>
        <argsstring></argsstring>
        <name>nux_tensor_desc_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="283" column="31" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nux_8h_1a9df1cb134bb76b907cb3ba80412ffac6" prot="public" static="no">
        <type>enum <ref refid="nux_8h_1a371006fb2e9b32996c00702ebe110510" kindref="member">TensorDataType</ref></type>
        <definition>typedef enum TensorDataType nux_tensor_dtype_t</definition>
        <argsstring></argsstring>
        <name>nux_tensor_dtype_t</name>
        <briefdescription>
<para>Represent a data type of tensor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="283" column="31" bodyfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" bodystart="288" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="nux_8h_1aeb72e12ddb9ce47cdafb246b3cfbdd20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* version</definition>
        <argsstring>(void)</argsstring>
        <name>version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return a version of Nux native library. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="297" column="12" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="297" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1ab1336033b102c9837ca990273ec6456d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* git_short_hash</definition>
        <argsstring>(void)</argsstring>
        <name>git_short_hash</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return a short Git hash of Nux native library. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="302" column="12" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="302" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a8475134ef3cbbf41d0a2021edcbfa24b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* build_timestamp</definition>
        <argsstring>(void)</argsstring>
        <name>build_timestamp</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return a build timestamp of Nux native library. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="307" column="12" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="307" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a95c9321d77ff43a8873d1d86eeb5d3fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enable_logging</definition>
        <argsstring>(void)</argsstring>
        <name>enable_logging</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Enable a logger. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="312" column="6" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="312" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a861fc462f4f280975bb47edb7565a2c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enable_furiosa_logging</definition>
        <argsstring>(void)</argsstring>
        <name>enable_furiosa_logging</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Enable a furiosa logger. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="317" column="6" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="317" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1ae68b58f43d3a93f6edf9d0c0bea56e6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref></type>
        <definition>enum nux_error_t create_nux</definition>
        <argsstring>(nux_handle_t *nux)</argsstring>
        <name>create_nux</name>
        <param>
          <type><ref refid="nux_8h_1a8aaa845d62c8e2ba0b08492ad4312b4a" kindref="member">nux_handle_t</ref> *</type>
          <declname>nux</declname>
        </param>
        <briefdescription>
<para>Creates a new nux handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">nux</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutable pointer to receive a created Nux handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a9ed6c5025d2d89b340cd46185d394b3a" kindref="member">nux_error_t_success</ref> if successful, or it will return <ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03afe4023c8cd3c553d0ac0787a403a18ca" kindref="member">nux_error_t_nux_creation_failed</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="317" column="6" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="317" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1af85121c378e53e7c270015a79c0af782" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void destroy_nux</definition>
        <argsstring>(nux_handle_t nux)</argsstring>
        <name>destroy_nux</name>
        <param>
          <type><ref refid="nux_8h_1a8aaa845d62c8e2ba0b08492ad4312b4a" kindref="member">nux_handle_t</ref></type>
          <declname>nux</declname>
        </param>
        <briefdescription>
<para>Destroy the Nux handle and release its resources. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nux</parametername>
</parameternamelist>
<parameterdescription>
<para>Nux handle to be destroyed. It must not be NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="333" column="6" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="333" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a0a8c9bb5290414fa8c50a4225a41cd68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref></type>
        <definition>enum nux_error_t nux_create_sync_model</definition>
        <argsstring>(nux_handle_t nux, const uint8_t *buffer, nux_buffer_len_t len, nux_sync_model_t *model)</argsstring>
        <name>nux_create_sync_model</name>
        <param>
          <type><ref refid="nux_8h_1a8aaa845d62c8e2ba0b08492ad4312b4a" kindref="member">nux_handle_t</ref></type>
          <declname>nux</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1aed964c658135b64a4615538f6d3fe673" kindref="member">nux_buffer_len_t</ref></type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1a2658304913df93888e11892bc40ea34f" kindref="member">nux_sync_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Create an instance of a synchronous model. </para>
        </briefdescription>
        <detaileddescription>
<para>It creates a synchronous model to execute a compiled ENF binary. The synchronous model provides APIs to run a single inference task with one input batch at a time.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nux</parametername>
</parameternamelist>
<parameterdescription>
<para>Nux handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Byte buffer containing ENF binary </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Byte length of <computeroutput>buffer</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">model</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutable pointer to receive the handle of a created sync model </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="333" column="6" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="333" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a0f6a635eb4e6076213dceb64df4d03bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void destroy_sync_model</definition>
        <argsstring>(nux_sync_model_t model)</argsstring>
        <name>destroy_sync_model</name>
        <param>
          <type><ref refid="nux_8h_1a2658304913df93888e11892bc40ea34f" kindref="member">nux_sync_model_t</ref></type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Destroy the sync model and release its resources. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>Sync model to be destroyed, and it must not be NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="357" column="6" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="357" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1ac1bf7db36e6dd35f73a41f4bec1be5d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t model_count_inputs</definition>
        <argsstring>(nux_sync_model_t model)</argsstring>
        <name>model_count_inputs</name>
        <param>
          <type><ref refid="nux_8h_1a2658304913df93888e11892bc40ea34f" kindref="member">nux_sync_model_t</ref></type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Return the number of input tensors of a given sync model. </para>
        </briefdescription>
        <detaileddescription>
<para>A model can have more than one input tensor. This function returns how many input tensors this model has.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>Sync model </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Output tensors of this model </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="368" column="10" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="368" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1ab007ff381c0e0dd9e72da5147af733ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t model_count_outputs</definition>
        <argsstring>(nux_sync_model_t model)</argsstring>
        <name>model_count_outputs</name>
        <param>
          <type><ref refid="nux_8h_1a2658304913df93888e11892bc40ea34f" kindref="member">nux_sync_model_t</ref></type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Return the number of output tensors of a given sync model. </para>
        </briefdescription>
        <detaileddescription>
<para>A model can have more than one output tensor. This function returns how many output tensors this model has.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>Sync model </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Output tensors of this model </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="379" column="10" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="379" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a80b727e0c054b2db830808b882f68305" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref></type>
        <definition>enum nux_error_t model_input_tensor</definition>
        <argsstring>(nux_sync_model_t model, uint32_t index, nux_tensor_t *tensor)</argsstring>
        <name>model_input_tensor</name>
        <param>
          <type><ref refid="nux_8h_1a2658304913df93888e11892bc40ea34f" kindref="member">nux_sync_model_t</ref></type>
          <declname>model</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1a94b4b218d26fecf1b1a4e3b102484b4c" kindref="member">nux_tensor_t</ref> *</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
<para>Get the handle of a specified input tensor from a given sync model. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>An input tensor handle will be valid until <ref refid="nux_8h_1a0f6a635eb4e6076213dceb64df4d03bc" kindref="member">destroy_sync_model</ref> with this <computeroutput>model</computeroutput> is called.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>Sync model </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Input tensor index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutable pointer to receive the handle of a specified input tensor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="379" column="10" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="379" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1af8a884f8271dddc703f18103a56157ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref></type>
        <definition>enum nux_error_t model_output_tensor</definition>
        <argsstring>(nux_sync_model_t model, uint32_t index, nux_tensor_t *tensor)</argsstring>
        <name>model_output_tensor</name>
        <param>
          <type><ref refid="nux_8h_1a2658304913df93888e11892bc40ea34f" kindref="member">nux_sync_model_t</ref></type>
          <declname>model</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1a94b4b218d26fecf1b1a4e3b102484b4c" kindref="member">nux_tensor_t</ref> *</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
<para>Get the handle of a specified output tensor from a given sync model. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Output tensor handle will be valid until <ref refid="nux_8h_1a0f6a635eb4e6076213dceb64df4d03bc" kindref="member">destroy_sync_model</ref> with this <computeroutput>model</computeroutput> is called.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>Sync model </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Output tensor index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutable pointer to receive a specified output tensor handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="379" column="10" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="379" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1aeb9dee222b8b07f4ae10e6e32b99301f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref></type>
        <definition>enum nux_error_t model_run</definition>
        <argsstring>(nux_sync_model_t model)</argsstring>
        <name>model_run</name>
        <param>
          <type><ref refid="nux_8h_1a2658304913df93888e11892bc40ea34f" kindref="member">nux_sync_model_t</ref></type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Run a single inference task. </para>
        </briefdescription>
        <detaileddescription>
<para>Before calling this function, you must fill input tensors with proper data. Please refer to <ref refid="nux_8h_1a80b727e0c054b2db830808b882f68305" kindref="member">model_input_tensor</ref> and <ref refid="nux_8h_1a3139df500cc7640a1516cafae8f3818d" kindref="member">tensor_set_buffer</ref> to learn how to fill input tensors with data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="379" column="10" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="379" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1ac300486348c761b9bfa20cf614d06dca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref></type>
        <definition>enum nux_error_t tensor_get_buffer</definition>
        <argsstring>(nux_tensor_t tensor, nux_buffer_t *buffer, nux_buffer_len_t *len)</argsstring>
        <name>tensor_get_buffer</name>
        <param>
          <type><ref refid="nux_8h_1a94b4b218d26fecf1b1a4e3b102484b4c" kindref="member">nux_tensor_t</ref></type>
          <declname>tensor</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1af81df491b6c3789d07e01f08a7bebca7" kindref="member">nux_buffer_t</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1aed964c658135b64a4615538f6d3fe673" kindref="member">nux_buffer_len_t</ref> *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Get a pointer to the data buffer of a given tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>Once <ref refid="nux_8h_1aeb9dee222b8b07f4ae10e6e32b99301f" kindref="member">model_run</ref> is called, the inference result will be written into output tensors. This function returns a pointer to the data buffer of a specified output tensor.</para>
<para><simplesect kind="remark"><para>the buffers of output tensors are valid until <ref refid="nux_8h_1a0f6a635eb4e6076213dceb64df4d03bc" kindref="member">destroy_sync_model</ref> is called.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor from which you want to get a pointer of the data buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutable pointer to receive the pointer to the data buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">len</parametername>
</parameternamelist>
<parameterdescription>
<para>Byte length of <computeroutput>buffer</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>nux_error_t_success if successful </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="379" column="10" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="379" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1acb618caa33b7852140a4c7bf5cea3c93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref></type>
        <definition>enum nux_error_t tensor_fill_buffer</definition>
        <argsstring>(nux_tensor_t tensor, nux_buffer_t buffer, nux_buffer_len_t len)</argsstring>
        <name>tensor_fill_buffer</name>
        <param>
          <type><ref refid="nux_8h_1a94b4b218d26fecf1b1a4e3b102484b4c" kindref="member">nux_tensor_t</ref></type>
          <declname>tensor</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1af81df491b6c3789d07e01f08a7bebca7" kindref="member">nux_buffer_t</ref></type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1aed964c658135b64a4615538f6d3fe673" kindref="member">nux_buffer_len_t</ref></type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Copy data into the data buffer of a specified input tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>To execute <ref refid="nux_8h_1aeb9dee222b8b07f4ae10e6e32b99301f" kindref="member">model_run</ref>, you first need to fill input tensors with data. <ref refid="nux_8h_1acb618caa33b7852140a4c7bf5cea3c93" kindref="member">tensor_fill_buffer</ref> copies the data into the data buffer of a specified input tensor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor handle into which you want to copy input data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Byte length of <computeroutput>buffer</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>nux_error_t_success if successful, or nux_error_t_invalid_buffer if <computeroutput>buffer</computeroutput> is invalid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="379" column="10" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="379" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a3139df500cc7640a1516cafae8f3818d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref></type>
        <definition>enum nux_error_t tensor_set_buffer</definition>
        <argsstring>(nux_tensor_t tensor, nux_buffer_t buffer, nux_buffer_len_t len, void(*free)(uint8_t *, uintptr_t))</argsstring>
        <name>tensor_set_buffer</name>
        <param>
          <type><ref refid="nux_8h_1a94b4b218d26fecf1b1a4e3b102484b4c" kindref="member">nux_tensor_t</ref></type>
          <declname>tensor</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1af81df491b6c3789d07e01f08a7bebca7" kindref="member">nux_buffer_t</ref></type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1aed964c658135b64a4615538f6d3fe673" kindref="member">nux_buffer_len_t</ref></type>
          <declname>len</declname>
        </param>
        <param>
          <type>void(*)(uint8_t *, uintptr_t)</type>
          <declname>free</declname>
        </param>
        <briefdescription>
<para>Specify a pointer to a data buffer to a specified input tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is almost same to <ref refid="nux_8h_1acb618caa33b7852140a4c7bf5cea3c93" kindref="member">tensor_fill_buffer</ref>. However, <computeroutput>tensor</computeroutput> takes the ownership of the buffer with <computeroutput>free</computeroutput> function to deallocate the buffer. Ensure that nothing else uses the pointer after calling this function.</para>
<para>if <computeroutput>free</computeroutput> is <computeroutput>null</computeroutput>, <computeroutput>tensor</computeroutput> will not deallocate the buffer. It can be useful when you want to reuse the buffer or buffer is on a stack area of a function. Please ensure that the buffer must be deallocated manually by users in order to prevent the memory leak.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor handle into which you want to copy input data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Byte length of <computeroutput>buffer</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free</parametername>
</parameternamelist>
<parameterdescription>
<para>a function pointer to deallocate a buffer. If <computeroutput>free</computeroutput> is <computeroutput>null</computeroutput>, <computeroutput>tensor</computeroutput> will not deallocate the data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>nux_error_t_success if successful, or nux_error_t_invalid_buffer if <computeroutput>buffer</computeroutput> is invalid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="379" column="10" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="379" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a0842cc2b55b567e39a175b287690b833" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref></type>
        <definition>enum nux_error_t nux_create_task_model</definition>
        <argsstring>(nux_handle_t nux, const uint8_t *buffer, nux_buffer_len_t len, uint32_t max_batch, nux_output_callback_t output_callback, nux_error_callback_t error_callback, nux_finish_callback_t finish_callback, nux_task_model_t *task_model)</argsstring>
        <name>nux_create_task_model</name>
        <param>
          <type><ref refid="nux_8h_1a8aaa845d62c8e2ba0b08492ad4312b4a" kindref="member">nux_handle_t</ref></type>
          <declname>nux</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1aed964c658135b64a4615538f6d3fe673" kindref="member">nux_buffer_len_t</ref></type>
          <declname>len</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_batch</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1a4bf21e12388c35aa93937f3ef11b2d58" kindref="member">nux_output_callback_t</ref></type>
          <declname>output_callback</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1a1ef90898a20c09267ebb0cd6ba4bc005" kindref="member">nux_error_callback_t</ref></type>
          <declname>error_callback</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1ac59137484096663432e27c8e85d74eb4" kindref="member">nux_finish_callback_t</ref></type>
          <declname>finish_callback</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1a2a9df2cca7933d9a992ff02f18f7b32e" kindref="member">nux_task_model_t</ref> *</type>
          <declname>task_model</declname>
        </param>
        <briefdescription>
<para>Create an instance of a task model. </para>
        </briefdescription>
        <detaileddescription>
<para>It allows users to run multiple inference tasks asynchronously and simultaneously. When each task is completed or failed, corresponding callback functions will be called with <ref refid="nux_8h_1a85c8a2e016cba474b1d72a43be2658b8" kindref="member">nux_request_id_t</ref>, an identifier of a task request. See also <ref refid="nux_8h_1af9d6c581a36012b468636777dd4eaca1" kindref="member">task_execute</ref> for more details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nux</parametername>
</parameternamelist>
<parameterdescription>
<para>Nux handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Byte buffer containing ENF binary </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Byte length of <computeroutput>buffer</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_batch</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of concurrent running tasks It can be limited according to internal configurations and HW capacity. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function invoked when a task is completed. It will be called per output tensor. Please see <ref refid="nux_8h_1a4bf21e12388c35aa93937f3ef11b2d58" kindref="member">nux_output_callback_t</ref> for more details. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function invoked when a task is failed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>finish_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function which will be called finally after the output_callback is called after all output tensors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>task_model</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutable pointer to receive the handle of a created task model </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="379" column="10" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="379" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a7475a6df5e1c04159322b71d55979799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void destroy_task_model</definition>
        <argsstring>(nux_task_model_t task_model)</argsstring>
        <name>destroy_task_model</name>
        <param>
          <type><ref refid="nux_8h_1a2a9df2cca7933d9a992ff02f18f7b32e" kindref="member">nux_task_model_t</ref></type>
          <declname>task_model</declname>
        </param>
        <briefdescription>
<para>Destroy the task model and release its resources. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task_model</parametername>
</parameternamelist>
<parameterdescription>
<para>Task model to be destroyed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="502" column="6" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="502" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a4c97ec2ec3df18d11981f050f1c66890" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool task_model_is_all_task_done</definition>
        <argsstring>(nux_task_model_t task_model)</argsstring>
        <name>task_model_is_all_task_done</name>
        <param>
          <type><ref refid="nux_8h_1a2a9df2cca7933d9a992ff02f18f7b32e" kindref="member">nux_task_model_t</ref></type>
          <declname>task_model</declname>
        </param>
        <briefdescription>
<para>Return <computeroutput>true</computeroutput> if there&apos;s no running tasks, or <computeroutput>false</computeroutput> if any task is still running. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task_model</parametername>
</parameternamelist>
<parameterdescription>
<para>Task handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="509" column="6" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="509" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a2a325d501f34c8d3047b17a5acd8f54c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref></type>
        <definition>enum nux_error_t task_model_get_task</definition>
        <argsstring>(nux_task_model_t task_model, nux_task_t *task)</argsstring>
        <name>task_model_get_task</name>
        <param>
          <type><ref refid="nux_8h_1a2a9df2cca7933d9a992ff02f18f7b32e" kindref="member">nux_task_model_t</ref></type>
          <declname>task_model</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1acce67ab377db47043a0ae0f1e50e38e1" kindref="member">nux_task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Get a task handle from a specified task model. </para>
        </briefdescription>
        <detaileddescription>
<para>When there&apos;s no available task in a given task model, it will block until new task is available.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task_model</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of a task model </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutable pointer to receive the handle of a created task </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="509" column="6" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="509" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a7c462db4b3b7d698d08585e84f39dce7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref></type>
        <definition>enum nux_error_t task_model_try_get_task</definition>
        <argsstring>(nux_task_model_t task_model, nux_task_t *task)</argsstring>
        <name>task_model_try_get_task</name>
        <param>
          <type><ref refid="nux_8h_1a2a9df2cca7933d9a992ff02f18f7b32e" kindref="member">nux_task_model_t</ref></type>
          <declname>task_model</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1acce67ab377db47043a0ae0f1e50e38e1" kindref="member">nux_task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>(non-blocking) Get a task handle from the specified task model. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s the non-blocking version of <ref refid="nux_8h_1a2a325d501f34c8d3047b17a5acd8f54c" kindref="member">task_model_get_task</ref>. This function returns an available task, or it will return immediately <ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a86d8ecfc91eb52f6dcb05b674fc18f8e" kindref="member">nux_error_t_get_task_failed</ref> if there&apos;s no available task in a given task model.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task_model</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of a task model </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutable pointer to receive the handle of a created task </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="509" column="6" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="509" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a89552859a24b08529bf9e950cd8bb34b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void destroy_task</definition>
        <argsstring>(nux_task_t task)</argsstring>
        <name>destroy_task</name>
        <param>
          <type><ref refid="nux_8h_1acce67ab377db47043a0ae0f1e50e38e1" kindref="member">nux_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Destroy the task and release its resources. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Once you call <ref refid="nux_8h_1af9d6c581a36012b468636777dd4eaca1" kindref="member">task_execute</ref> with a <computeroutput>task</computeroutput>, the <computeroutput>task</computeroutput> will get destroyed automatically. Please do not call <ref refid="nux_8h_1a89552859a24b08529bf9e950cd8bb34b" kindref="member">destroy_task</ref> with the <computeroutput>task</computeroutput> which is already passed to <ref refid="nux_8h_1af9d6c581a36012b468636777dd4eaca1" kindref="member">task_execute</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be destroyed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="544" column="6" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="544" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1af9d6c581a36012b468636777dd4eaca1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref></type>
        <definition>enum nux_error_t task_execute</definition>
        <argsstring>(nux_task_t task, nux_request_id_t request_id)</argsstring>
        <name>task_execute</name>
        <param>
          <type><ref refid="nux_8h_1acce67ab377db47043a0ae0f1e50e38e1" kindref="member">nux_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1a85c8a2e016cba474b1d72a43be2658b8" kindref="member">nux_request_id_t</ref></type>
          <declname>request_id</declname>
        </param>
        <briefdescription>
<para>Request one asynchronous inference task. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="nux_8h_1af9d6c581a36012b468636777dd4eaca1" kindref="member">task_execute</ref> submits a request for an inference task identified by <computeroutput>task</computeroutput>. Once a task is completed, <computeroutput>output_callback</computeroutput> function passed to <ref refid="nux_8h_1a0842cc2b55b567e39a175b287690b833" kindref="member">nux_create_task_model</ref> will be called with a distinct output index per output tensor. <computeroutput>finish_callback</computeroutput> function will be also called after <computeroutput>output_callback</computeroutput> function is called for all output tensors.</para>
<para><simplesect kind="remark"><para>Once you call <ref refid="nux_8h_1af9d6c581a36012b468636777dd4eaca1" kindref="member">task_execute</ref> with a <computeroutput>task</computeroutput>, the <computeroutput>task</computeroutput> will get destroyed automatically. Please do not call <ref refid="nux_8h_1a89552859a24b08529bf9e950cd8bb34b" kindref="member">destroy_task</ref> with the <computeroutput>task</computeroutput> which is already passed to <ref refid="nux_8h_1af9d6c581a36012b468636777dd4eaca1" kindref="member">task_execute</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task handle obtained from calling <ref refid="nux_8h_1a2a325d501f34c8d3047b17a5acd8f54c" kindref="member">task_model_get_task</ref> or <ref refid="nux_8h_1a7c462db4b3b7d698d08585e84f39dce7" kindref="member">task_model_try_get_task</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>request_id</parametername>
</parameternamelist>
<parameterdescription>
<para>An positive integer to distinguish task requests. The behavior of <ref refid="nux_8h_1af9d6c581a36012b468636777dd4eaca1" kindref="member">task_execute</ref> doesn&apos;t rely on a <computeroutput>request_id</computeroutput> value at all. <computeroutput>request_id</computeroutput> will be just passed to callback functions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a9ed6c5025d2d89b340cd46185d394b3a" kindref="member">nux_error_t_success</ref> if successful. or <ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03ac6bd66738165c430a8f4651d1f399534" kindref="member">nux_error_t_model_execution_failed</ref> if failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="544" column="6" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="544" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1ab33af2615cc40ef5c1f808e92844989a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="nux_8h_1af81df491b6c3789d07e01f08a7bebca7" kindref="member">nux_buffer_t</ref></type>
        <definition>nux_buffer_t task_input</definition>
        <argsstring>(nux_task_t task, nux_input_index_t index)</argsstring>
        <name>task_input</name>
        <param>
          <type><ref refid="nux_8h_1acce67ab377db47043a0ae0f1e50e38e1" kindref="member">nux_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1a7cb3fb8e947fec1309ec86fe1a5cfe9a" kindref="member">nux_input_index_t</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Return a mutable pointer to the buffer of the specified input tensor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the input tensor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A mutable pointer to the data buffer of the given input tensor </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="576" column="14" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="576" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a5e21f23e53910367aedd397a9e48b8ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="nux_8h_1aed964c658135b64a4615538f6d3fe673" kindref="member">nux_buffer_len_t</ref></type>
        <definition>nux_buffer_len_t task_input_size</definition>
        <argsstring>(nux_task_t task, nux_input_index_t index)</argsstring>
        <name>task_input_size</name>
        <param>
          <type><ref refid="nux_8h_1acce67ab377db47043a0ae0f1e50e38e1" kindref="member">nux_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1a7cb3fb8e947fec1309ec86fe1a5cfe9a" kindref="member">nux_input_index_t</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Return the buffer length in bytes of the specified input tensor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the input tensor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="584" column="18" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="584" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1abeefe6895d623679ae543a1dbab84010" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="nux_8h_1ad152e5d6c7a9d7057a1a39618f570043" kindref="member">nux_session_option_t</ref></type>
        <definition>nux_session_option_t nux_session_option_create</definition>
        <argsstring>(void)</argsstring>
        <name>nux_session_option_create</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Create a session option. </para>
        </briefdescription>
        <detaileddescription>
<para>It allows to specify more options for a session.</para>
<para><simplesect kind="return"><para>Session option </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="593" column="22" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="593" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a5db104690c98286ffc4e68ea19938c5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nux_session_option_set_device</definition>
        <argsstring>(nux_session_option_t builder, const char *devname)</argsstring>
        <name>nux_session_option_set_device</name>
        <param>
          <type><ref refid="nux_8h_1ad152e5d6c7a9d7057a1a39618f570043" kindref="member">nux_session_option_t</ref></type>
          <declname>builder</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>devname</declname>
        </param>
        <briefdescription>
<para>Set a NPU device to the given session option. </para>
        </briefdescription>
        <detaileddescription>
<para>If NPU device is not set, Session will use the default NPU device <computeroutput>npu0pe0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>option</parametername>
</parameternamelist>
<parameterdescription>
<para>Session option </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>devname</parametername>
</parameternamelist>
<parameterdescription>
<para>A NPU device name (e.g., npu0pe0, npu1pe0) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="603" column="6" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="603" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1ad11deaee86bd9a8423a9d095cf565021" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref></type>
        <definition>enum nux_error_t nux_session_option_set_compiler_config</definition>
        <argsstring>(nux_session_option_t option, const char *yaml)</argsstring>
        <name>nux_session_option_set_compiler_config</name>
        <param>
          <type><ref refid="nux_8h_1ad152e5d6c7a9d7057a1a39618f570043" kindref="member">nux_session_option_t</ref></type>
          <declname>option</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>yaml</declname>
        </param>
        <briefdescription>
<para>Set a compiler config to the given session option. </para>
        </briefdescription>
        <detaileddescription>
<para>If compiler config is not set, Session will use a default compiler config.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>option</parametername>
</parameternamelist>
<parameterdescription>
<para>Session option </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yaml</parametername>
</parameternamelist>
<parameterdescription>
<para>A yaml formatted string of compiler option </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a9ed6c5025d2d89b340cd46185d394b3a" kindref="member">nux_error_t_success</ref> if successful. or <ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a3302110dad3c6b57d35cb866540ee3d9" kindref="member">nux_error_t_invalid_yaml</ref> if <computeroutput>yaml</computeroutput> is not a valid yaml document. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="603" column="6" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="603" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a332899f8bd7d6719acf29b22b4c0a73a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nux_session_option_destroy</definition>
        <argsstring>(nux_session_option_t option)</argsstring>
        <name>nux_session_option_destroy</name>
        <param>
          <type><ref refid="nux_8h_1ad152e5d6c7a9d7057a1a39618f570043" kindref="member">nux_session_option_t</ref></type>
          <declname>option</declname>
        </param>
        <briefdescription>
<para>Destroy a session option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="620" column="6" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="620" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a97d689454b4f62f8a200760002c3dc7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref></type>
        <definition>enum nux_error_t nux_session_create</definition>
        <argsstring>(nux_buffer_t model_binary, nux_buffer_len_t model_binary_len, nux_session_option_t option, nux_session_t *out_sess)</argsstring>
        <name>nux_session_create</name>
        <param>
          <type><ref refid="nux_8h_1af81df491b6c3789d07e01f08a7bebca7" kindref="member">nux_buffer_t</ref></type>
          <declname>model_binary</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1aed964c658135b64a4615538f6d3fe673" kindref="member">nux_buffer_len_t</ref></type>
          <declname>model_binary_len</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1ad152e5d6c7a9d7057a1a39618f570043" kindref="member">nux_session_option_t</ref></type>
          <declname>option</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1acd038b1ce951e25bc8e9d0e9b33393c8" kindref="member">nux_session_t</ref> *</type>
          <declname>out_sess</declname>
        </param>
        <briefdescription>
<para>Create a session. </para>
        </briefdescription>
        <detaileddescription>
<para>Session provides simple and synchronous APIs to run inference tasks from a loaded model.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model_binary</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer which contains a model binary </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model_binary_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of <computeroutput>model_binary</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>option</parametername>
</parameternamelist>
<parameterdescription>
<para>Session option. If it is null, the default option will be used. <ref refid="nux_8h_1a97d689454b4f62f8a200760002c3dc7f" kindref="member">nux_session_create</ref> internally releases the session option pointed to by <computeroutput>option</computeroutput>, so <computeroutput>option</computeroutput> must not be dereferenced or destroyed manually (via <ref refid="nux_8h_1a332899f8bd7d6719acf29b22b4c0a73a" kindref="member">nux_session_option_destroy</ref>) after calling <ref refid="nux_8h_1a97d689454b4f62f8a200760002c3dc7f" kindref="member">nux_session_create</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">sess</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutable pointer to receive a created Nux handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a9ed6c5025d2d89b340cd46185d394b3a" kindref="member">nux_error_t_success</ref> if successful. or it will return other error value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="620" column="6" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="620" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a724a23e737b3add5a339be1dc7128309" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="nux_8h_1afb640feeb31a1f4c6a7d0277d8767c36" kindref="member">nux_model_t</ref></type>
        <definition>nux_model_t nux_session_get_model</definition>
        <argsstring>(nux_session_t sess)</argsstring>
        <name>nux_session_get_model</name>
        <param>
          <type><ref refid="nux_8h_1acd038b1ce951e25bc8e9d0e9b33393c8" kindref="member">nux_session_t</ref></type>
          <declname>sess</declname>
        </param>
        <briefdescription>
<para>Get the pointer of the Model of a given session. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sess</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of session instance. It must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer of the Model of a given session </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="648" column="13" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="648" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a494a7c6cf86f81fd8fd9a7ec0386aa39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref></type>
        <definition>enum nux_error_t nux_session_run</definition>
        <argsstring>(nux_session_t sess, nux_tensor_array_t inputs, nux_tensor_array_t outputs)</argsstring>
        <name>nux_session_run</name>
        <param>
          <type><ref refid="nux_8h_1acd038b1ce951e25bc8e9d0e9b33393c8" kindref="member">nux_session_t</ref></type>
          <declname>sess</declname>
        </param>
        <param>
          <type>nux_tensor_array_t</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>nux_tensor_array_t</type>
          <declname>outputs</declname>
        </param>
        <briefdescription>
<para>Run an inference task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sess</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of Session instance. It must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Input tensors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Output tensors </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a9ed6c5025d2d89b340cd46185d394b3a" kindref="member">nux_error_t_success</ref> if successful. or it will return other error value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="648" column="13" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="648" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1ae2513c3ef496314bc17b638320fda5e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nux_session_destroy</definition>
        <argsstring>(nux_session_t sess)</argsstring>
        <name>nux_session_destroy</name>
        <param>
          <type><ref refid="nux_8h_1acd038b1ce951e25bc8e9d0e9b33393c8" kindref="member">nux_session_t</ref></type>
          <declname>sess</declname>
        </param>
        <briefdescription>
<para>Destroy a session. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sess</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of Session instance to be destroyed. It must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="665" column="6" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="665" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a6d8b4d876c425963ecbc1812504c1ce9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref></type>
        <definition>enum nux_error_t nux_async_session_create</definition>
        <argsstring>(nux_buffer_t model_binary, nux_buffer_len_t model_binary_len, nux_session_option_t option, nux_async_session_t *out_sess, nux_completion_queue_t *out_queue)</argsstring>
        <name>nux_async_session_create</name>
        <param>
          <type><ref refid="nux_8h_1af81df491b6c3789d07e01f08a7bebca7" kindref="member">nux_buffer_t</ref></type>
          <declname>model_binary</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1aed964c658135b64a4615538f6d3fe673" kindref="member">nux_buffer_len_t</ref></type>
          <declname>model_binary_len</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1ad152e5d6c7a9d7057a1a39618f570043" kindref="member">nux_session_option_t</ref></type>
          <declname>option</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1a2d592d21337f153b24799e8f565a7187" kindref="member">nux_async_session_t</ref> *</type>
          <declname>out_sess</declname>
        </param>
        <param>
          <type>nux_completion_queue_t *</type>
          <declname>out_queue</declname>
        </param>
        <briefdescription>
<para>Create an asynchronous session and a queue to receive the results. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="nux_8h_1a2d592d21337f153b24799e8f565a7187" kindref="member">nux_async_session_t</ref> allows users to submit inference tasks. #nux_completion_queue_t is an iterator to receive the result in the asynchronous way. See also <ref refid="nux_8h_1a908c99ce9bb71a2802ee07241e372080" kindref="member">nux_async_session_run</ref> and <ref refid="nux_8h_1abcb841623cf8238c2317f8dd780e8870" kindref="member">nux_completion_queue_next</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model_binary</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer which contains a model binary </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model_binary_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of <computeroutput>model_binary</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>option</parametername>
</parameternamelist>
<parameterdescription>
<para>Session option. If it is null, the default option will be used. nux_session_create internally releases the session option pointed to by option, so option must not be dereferenced or destroyed manually (via nux_session_option_destroy) after calling nux_async_session_create. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out_sess</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutable pointer to an instance of async session </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out_queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutable pointer to an instance of async completion queue </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="665" column="6" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="665" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a908c99ce9bb71a2802ee07241e372080" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref></type>
        <definition>enum nux_error_t nux_async_session_run</definition>
        <argsstring>(nux_async_session_t sess, nux_context_t context, nux_tensor_array_t inputs)</argsstring>
        <name>nux_async_session_run</name>
        <param>
          <type><ref refid="nux_8h_1a2d592d21337f153b24799e8f565a7187" kindref="member">nux_async_session_t</ref></type>
          <declname>sess</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1af748dc0957775e74dde2c99baf34d19c" kindref="member">nux_context_t</ref></type>
          <declname>context</declname>
        </param>
        <param>
          <type>nux_tensor_array_t</type>
          <declname>inputs</declname>
        </param>
        <briefdescription>
<para>Submit an inference task asynchronously. It returns immediately. </para>
        </briefdescription>
        <detaileddescription>
<para>You can receive the completed inference results through #nux_completion_queue_t. please refer to <ref refid="nux_8h_1abcb841623cf8238c2317f8dd780e8870" kindref="member">nux_completion_queue_next</ref> to know how to receive the completed results.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sess</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of asynchronous session </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;context&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>is a void pointer, so you can pass any data to context. Generally, <computeroutput>context</computeroutput> can be used to identify what&apos;s the completion event. Also, sophisticated data structure can be used to to do more as soon as you receive the completion event. You must make sure the pointer must be valid as long as you want to use a passed context even after you receive the completion event. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>an array of tensors </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="665" column="6" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="665" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1abcb841623cf8238c2317f8dd780e8870" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nux_completion_queue_next</definition>
        <argsstring>(nux_completion_queue_t queue, nux_context_t *context, nux_tensor_array_t *outputs, enum nux_error_t *error)</argsstring>
        <name>nux_completion_queue_next</name>
        <param>
          <type>nux_completion_queue_t</type>
          <declname>queue</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1af748dc0957775e74dde2c99baf34d19c" kindref="member">nux_context_t</ref> *</type>
          <declname>context</declname>
        </param>
        <param>
          <type>nux_tensor_array_t *</type>
          <declname>outputs</declname>
        </param>
        <param>
          <type>enum <ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Wait until it receives any completion event, which can be success or fail. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="708" column="6" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="708" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a98249f0e276a29d6348f05a4befc1051" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nux_completion_queue_try_next</definition>
        <argsstring>(nux_completion_queue_t queue, nux_context_t *context, nux_tensor_array_t *outputs, enum nux_error_t *error)</argsstring>
        <name>nux_completion_queue_try_next</name>
        <param>
          <type>nux_completion_queue_t</type>
          <declname>queue</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1af748dc0957775e74dde2c99baf34d19c" kindref="member">nux_context_t</ref> *</type>
          <declname>context</declname>
        </param>
        <param>
          <type>nux_tensor_array_t *</type>
          <declname>outputs</declname>
        </param>
        <param>
          <type>enum <ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>It&apos;s almost the same as <ref refid="nux_8h_1abcb841623cf8238c2317f8dd780e8870" kindref="member">nux_completion_queue_next</ref>, but it immediately returns even if there hasn&apos;t been completion event after the last call. It will set <computeroutput>error</computeroutput> to <ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a14535aa4d38445a1bbcc92f5e6115d2a" kindref="member">nux_error_t_queue_no_data</ref>. if this function returns without any completion event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="719" column="6" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="719" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a295f7c7c1016a88d4de27b4b99aa1b2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nux_completion_queue_next_timeout</definition>
        <argsstring>(nux_completion_queue_t queue, nux_context_t *context, nux_tensor_array_t *outputs, enum nux_error_t *error, uint64_t timeout_millis)</argsstring>
        <name>nux_completion_queue_next_timeout</name>
        <param>
          <type>nux_completion_queue_t</type>
          <declname>queue</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1af748dc0957775e74dde2c99baf34d19c" kindref="member">nux_context_t</ref> *</type>
          <declname>context</declname>
        </param>
        <param>
          <type>nux_tensor_array_t *</type>
          <declname>outputs</declname>
        </param>
        <param>
          <type>enum <ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref> *</type>
          <declname>error</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>timeout_millis</declname>
        </param>
        <briefdescription>
<para>It&apos;s almost the same as <ref refid="nux_8h_1abcb841623cf8238c2317f8dd780e8870" kindref="member">nux_completion_queue_next</ref>, but it will wait for a given timeout in milli seconds even if there&apos;s no completion event. After the timeout is expired, it will set <ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a654f467bd6d8eae2cbf4830491ee5b36" kindref="member">nux_error_t_queue_wait_timeout</ref> to <computeroutput>error</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="729" column="6" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="729" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1ab49cc0347c92073c07b89e48861a6f72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="nux_8h_1afb640feeb31a1f4c6a7d0277d8767c36" kindref="member">nux_model_t</ref></type>
        <definition>nux_model_t nux_async_session_get_model</definition>
        <argsstring>(nux_async_session_t sess)</argsstring>
        <name>nux_async_session_get_model</name>
        <param>
          <type><ref refid="nux_8h_1a2d592d21337f153b24799e8f565a7187" kindref="member">nux_async_session_t</ref></type>
          <declname>sess</declname>
        </param>
        <briefdescription>
<para>Get the pointer of the Model of a given asynchronous session. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sess</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of asynchronous session instance. It must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer of the Model of a given asynchronous session </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="741" column="13" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="741" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a043d4d870e73c363828cb5e0ba370cbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nux_async_session_destroy</definition>
        <argsstring>(nux_async_session_t sess)</argsstring>
        <name>nux_async_session_destroy</name>
        <param>
          <type><ref refid="nux_8h_1a2d592d21337f153b24799e8f565a7187" kindref="member">nux_async_session_t</ref></type>
          <declname>sess</declname>
        </param>
        <briefdescription>
<para>Destroy an asynchronous session. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="746" column="6" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="746" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1ae6423dec3527aa9abbb4a3945750ee00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nux_completion_queue_destroy</definition>
        <argsstring>(nux_completion_queue_t queue)</argsstring>
        <name>nux_completion_queue_destroy</name>
        <param>
          <type>nux_completion_queue_t</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
<para>Destroy a completion queue. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="751" column="6" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="751" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a7738c91ae7d4034a54aae10593ee4252" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uintptr_t</type>
        <definition>uintptr_t nux_input_num</definition>
        <argsstring>(nux_model_t model)</argsstring>
        <name>nux_input_num</name>
        <param>
          <type><ref refid="nux_8h_1afb640feeb31a1f4c6a7d0277d8767c36" kindref="member">nux_model_t</ref></type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Return the number of input tensors of the given model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="756" column="11" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="756" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1ad66893954e82d78981d579b06e13f454" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uintptr_t</type>
        <definition>uintptr_t nux_output_num</definition>
        <argsstring>(nux_model_t model)</argsstring>
        <name>nux_output_num</name>
        <param>
          <type><ref refid="nux_8h_1afb640feeb31a1f4c6a7d0277d8767c36" kindref="member">nux_model_t</ref></type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Return the number of output tensors of the given model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="761" column="11" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="761" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a4cc5347337275a0bbc954dfb3216559f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nux_tensor_desc_t</type>
        <definition>nux_tensor_desc_t nux_input_desc</definition>
        <argsstring>(nux_model_t model, uintptr_t index)</argsstring>
        <name>nux_input_desc</name>
        <param>
          <type><ref refid="nux_8h_1afb640feeb31a1f4c6a7d0277d8767c36" kindref="member">nux_model_t</ref></type>
          <declname>model</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Return the description of i-th input tensor of the given model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="766" column="19" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="766" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a25c9372c2ad43ddf1224938ff7ebb33f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nux_tensor_desc_t</type>
        <definition>nux_tensor_desc_t nux_output_desc</definition>
        <argsstring>(nux_model_t model, uintptr_t index)</argsstring>
        <name>nux_output_desc</name>
        <param>
          <type><ref refid="nux_8h_1afb640feeb31a1f4c6a7d0277d8767c36" kindref="member">nux_model_t</ref></type>
          <declname>model</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Return the description of i-th output tensor of the given model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="771" column="19" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="771" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a588e41922d4d06132d6c73448cd3dd48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uintptr_t</type>
        <definition>uintptr_t nux_tensor_dim_num</definition>
        <argsstring>(nux_tensor_desc_t tensor)</argsstring>
        <name>nux_tensor_dim_num</name>
        <param>
          <type>nux_tensor_desc_t</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
<para>Return the number of dimensions of the given tensor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="776" column="11" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="776" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1af60676268150689a95be7ff4ee105317" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uintptr_t</type>
        <definition>uintptr_t nux_tensor_dim</definition>
        <argsstring>(nux_tensor_desc_t tensor, uintptr_t index)</argsstring>
        <name>nux_tensor_dim</name>
        <param>
          <type>nux_tensor_desc_t</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Return the dimension size of the dimension index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="781" column="11" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="781" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a8a3f51dfe41b1b4c2c314bf587414f5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="nux_8h_1ae3996976d8ffb3e58d88f58227473f8e" kindref="member">Axis</ref></type>
        <definition>enum Axis nux_tensor_axis</definition>
        <argsstring>(nux_tensor_desc_t tensor, uintptr_t idx)</argsstring>
        <name>nux_tensor_axis</name>
        <param>
          <type>nux_tensor_desc_t</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Return the axis type of i-th dimension (e.g., Width, Height, Channel) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="781" column="11" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="781" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1ad1ddec37b7e6944742790c0e84d54a72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="nux_8h_1a9df1cb134bb76b907cb3ba80412ffac6" kindref="member">nux_tensor_dtype_t</ref></type>
        <definition>nux_tensor_dtype_t nux_tensor_dtype</definition>
        <argsstring>(nux_tensor_desc_t tensor)</argsstring>
        <name>nux_tensor_dtype</name>
        <param>
          <type>nux_tensor_desc_t</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
<para>Return the tensor data type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="791" column="20" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="791" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a735e8fcd63ff8b8de0922ab95b123cda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uintptr_t</type>
        <definition>uintptr_t nux_tensor_len</definition>
        <argsstring>(nux_tensor_desc_t tensor)</argsstring>
        <name>nux_tensor_len</name>
        <param>
          <type>nux_tensor_desc_t</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
<para>Return the total number of all elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="796" column="11" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="796" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a1c5cc132c6c21aecb41a2b6a26fe94ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uintptr_t</type>
        <definition>uintptr_t nux_tensor_size</definition>
        <argsstring>(nux_tensor_desc_t tensor)</argsstring>
        <name>nux_tensor_size</name>
        <param>
          <type>nux_tensor_desc_t</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
<para>Return the byte size of tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>It will be useful when you have to fill the tensor buffer with data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="803" column="11" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="803" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a52d9d4fecc1262ce8ac6a457ecf1c820" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="nux_8h_1a94b4b218d26fecf1b1a4e3b102484b4c" kindref="member">nux_tensor_t</ref></type>
        <definition>nux_tensor_t nux_tensor_create</definition>
        <argsstring>(nux_tensor_desc_t desc)</argsstring>
        <name>nux_tensor_create</name>
        <param>
          <type>nux_tensor_desc_t</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
<para>Create a tensor according to a given tensor description. </para>
        </briefdescription>
        <detaileddescription>
<para>You have to call <computeroutput>nux_tensor_destroy</computeroutput> to release the resource of a create tensor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="810" column="14" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="810" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1aab8f50d0285cc45c801e8575d2642ecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="nux_8h_1a94b4b218d26fecf1b1a4e3b102484b4c" kindref="member">nux_tensor_t</ref></type>
        <definition>nux_tensor_t nux_tensor_create_with_buffer</definition>
        <argsstring>(nux_tensor_desc_t desc, nux_buffer_t buffer, nux_buffer_len_t len, void(*free)(uint8_t *, uintptr_t))</argsstring>
        <name>nux_tensor_create_with_buffer</name>
        <param>
          <type>nux_tensor_desc_t</type>
          <declname>desc</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1af81df491b6c3789d07e01f08a7bebca7" kindref="member">nux_buffer_t</ref></type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="nux_8h_1aed964c658135b64a4615538f6d3fe673" kindref="member">nux_buffer_len_t</ref></type>
          <declname>len</declname>
        </param>
        <param>
          <type>void(*)(uint8_t *, uintptr_t)</type>
          <declname>free</declname>
        </param>
        <briefdescription>
<para>Create a tensor with an exiting buffer. It doesn&apos;t copy the data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="815" column="14" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="815" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a861a2381c6e005f98924888d88d9e4d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nux_tensor_destroy</definition>
        <argsstring>(nux_tensor_t tensor)</argsstring>
        <name>nux_tensor_destroy</name>
        <param>
          <type><ref refid="nux_8h_1a94b4b218d26fecf1b1a4e3b102484b4c" kindref="member">nux_tensor_t</ref></type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
<para>Destroy a tensor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="823" column="6" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="823" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1ad309d30bab0374303b7f99ebfb9ab525" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t *</type>
        <definition>uint8_t* nux_tensor_buffer</definition>
        <argsstring>(nux_tensor_t tensor)</argsstring>
        <name>nux_tensor_buffer</name>
        <param>
          <type><ref refid="nux_8h_1a94b4b218d26fecf1b1a4e3b102484b4c" kindref="member">nux_tensor_t</ref></type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
<para>Return the pointer to the buffer of this tensor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="828" column="9" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="828" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1ab150b1e024176cba675bfab05335450c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uintptr_t</type>
        <definition>uintptr_t nux_tensor_buffer_size</definition>
        <argsstring>(nux_tensor_t tensor)</argsstring>
        <name>nux_tensor_buffer_size</name>
        <param>
          <type><ref refid="nux_8h_1a94b4b218d26fecf1b1a4e3b102484b4c" kindref="member">nux_tensor_t</ref></type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
<para>Return the size of tensor buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="833" column="11" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="833" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a78e958bc1fdbcdf6d212bbf75bc0ab44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nux_tensor_array_t</type>
        <definition>nux_tensor_array_t nux_tensor_array_allocate_inputs</definition>
        <argsstring>(nux_model_t model)</argsstring>
        <name>nux_tensor_array_allocate_inputs</name>
        <param>
          <type><ref refid="nux_8h_1afb640feeb31a1f4c6a7d0277d8767c36" kindref="member">nux_model_t</ref></type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Return an array of input tensors with allocated buffers. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is generally used with <ref refid="nux_8h_1acb618caa33b7852140a4c7bf5cea3c93" kindref="member">tensor_fill_buffer</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="840" column="20" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="840" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a08c30289b7de1ee5cd2127eca182cfda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nux_tensor_array_t</type>
        <definition>nux_tensor_array_t nux_tensor_array_create_inputs</definition>
        <argsstring>(nux_model_t model)</argsstring>
        <name>nux_tensor_array_create_inputs</name>
        <param>
          <type><ref refid="nux_8h_1afb640feeb31a1f4c6a7d0277d8767c36" kindref="member">nux_model_t</ref></type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Return an array of input tensors without allocated buffers. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is generally used with <ref refid="nux_8h_1a3139df500cc7640a1516cafae8f3818d" kindref="member">tensor_set_buffer</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="847" column="20" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="847" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a17d0ac22d9093471506f24b7f80b2237" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nux_tensor_array_t</type>
        <definition>nux_tensor_array_t nux_tensor_array_allocate_outputs</definition>
        <argsstring>(nux_model_t model)</argsstring>
        <name>nux_tensor_array_allocate_outputs</name>
        <param>
          <type><ref refid="nux_8h_1afb640feeb31a1f4c6a7d0277d8767c36" kindref="member">nux_model_t</ref></type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Return an array of output tensors with allocated buffers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="852" column="20" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="852" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a94b43022d166a595ed42e426eecec091" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nux_tensor_array_t</type>
        <definition>nux_tensor_array_t nux_tensor_array_create_outputs</definition>
        <argsstring>(nux_model_t model)</argsstring>
        <name>nux_tensor_array_create_outputs</name>
        <param>
          <type><ref refid="nux_8h_1afb640feeb31a1f4c6a7d0277d8767c36" kindref="member">nux_model_t</ref></type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Return an array of output tensors without allocated buffers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="857" column="20" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="857" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a44b43c22f7168d71bb7629156a83bc02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="nux_8h_1a94b4b218d26fecf1b1a4e3b102484b4c" kindref="member">nux_tensor_t</ref></type>
        <definition>nux_tensor_t nux_tensor_array_get</definition>
        <argsstring>(nux_tensor_array_t array, uintptr_t index)</argsstring>
        <name>nux_tensor_array_get</name>
        <param>
          <type>nux_tensor_array_t</type>
          <declname>array</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Return a tensor from the given tensor array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="862" column="14" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="862" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a51f366a3b8a2d537a25e947a7b7b6a30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uintptr_t</type>
        <definition>uintptr_t nux_tensor_array_len</definition>
        <argsstring>(nux_tensor_array_t array)</argsstring>
        <name>nux_tensor_array_len</name>
        <param>
          <type>nux_tensor_array_t</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Return the number of tensors in the given tensor array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="867" column="11" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="867" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="nux_8h_1a5694060a448a96fab52667650312336b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nux_tensor_array_destroy</definition>
        <argsstring>(nux_tensor_array_t array)</argsstring>
        <name>nux_tensor_array_destroy</name>
        <param>
          <type>nux_tensor_array_t</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Destroy a tensor array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" line="872" column="6" declfile="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h" declline="872" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>furiosa_libnux_bindings_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>furiosa_libnux_bindings_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Warning,<sp/>this<sp/>file<sp/>is<sp/>autogenerated<sp/>by<sp/>cbindgen.<sp/>Don&apos;t<sp/>modify<sp/>this<sp/>manually.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="nux_8h_1ae3996976d8ffb3e58d88f58227473f8e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1ae3996976d8ffb3e58d88f58227473f8e" kindref="member">Axis</ref><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>axis_width<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>axis_height<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="21" refid="nux_8h_1ae3996976d8ffb3e58d88f58227473f8ea1d9228549e8e981a783052c0e6404c95" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="nux_8h_1ae3996976d8ffb3e58d88f58227473f8ea1d9228549e8e981a783052c0e6404c95" kindref="member">axis_channel</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="25" refid="nux_8h_1ae3996976d8ffb3e58d88f58227473f8ea120cc55f68810d6249094cff3b24fd31" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="nux_8h_1ae3996976d8ffb3e58d88f58227473f8ea120cc55f68810d6249094cff3b24fd31" kindref="member">axis_batch</ref><sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>axis_width_outer<sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>axis_height_outer<sp/>=<sp/>5,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>axis_channel_outer<sp/>=<sp/>6,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>axis_batch_outer<sp/>=<sp/>7,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>axis_unknown<sp/>=<sp/>8,</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}<sp/><ref refid="nux_8h_1ae3996976d8ffb3e58d88f58227473f8e" kindref="member">Axis</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="nux_8h_1a371006fb2e9b32996c00702ebe110510" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a371006fb2e9b32996c00702ebe110510" kindref="member">TensorDataType</ref><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>tensor_data_type_float32<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>tensor_data_type_uint8<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>tensor_data_type_int8<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>tensor_data_type_int32<sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="41" refid="nux_8h_1a68bc22b91cf23fca3c489bfc55d97b6c" refkind="member"><highlight class="normal">}<sp/><ref refid="nux_8h_1a371006fb2e9b32996c00702ebe110510" kindref="member">TensorDataType</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref><sp/>{</highlight></codeline>
<codeline lineno="50" refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a9ed6c5025d2d89b340cd46185d394b3a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a9ed6c5025d2d89b340cd46185d394b3a" kindref="member">nux_error_t_success</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="54" refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03afe4023c8cd3c553d0ac0787a403a18ca" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03afe4023c8cd3c553d0ac0787a403a18ca" kindref="member">nux_error_t_nux_creation_failed</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="59" refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a29116f70ad490400f07af16b05441492" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a29116f70ad490400f07af16b05441492" kindref="member">nux_error_t_model_deploy_failed</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="64" refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03ac6bd66738165c430a8f4651d1f399534" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03ac6bd66738165c430a8f4651d1f399534" kindref="member">nux_error_t_model_execution_failed</ref><sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="69" refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03ad4ef5746aff7a8084e31f55d96124756" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03ad4ef5746aff7a8084e31f55d96124756" kindref="member">nux_error_t_invalid_input_index</ref><sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="74" refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a3c56a6ebe0ce3c87f20317f37e8a58d1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a3c56a6ebe0ce3c87f20317f37e8a58d1" kindref="member">nux_error_t_invalid_output_index</ref><sp/>=<sp/>5,</highlight></codeline>
<codeline lineno="78" refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03acd4211b3688454861ac4982454dc3350" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03acd4211b3688454861ac4982454dc3350" kindref="member">nux_error_t_invalid_buffer</ref><sp/>=<sp/>6,</highlight></codeline>
<codeline lineno="82" refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a47d1dc88180bfb3db50fa2a0ad6cc5de" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a47d1dc88180bfb3db50fa2a0ad6cc5de" kindref="member">nux_error_t_invalid_inputs</ref><sp/>=<sp/>7,</highlight></codeline>
<codeline lineno="86" refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a21ca1301b3f25e4c706ae8bdd2260681" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a21ca1301b3f25e4c706ae8bdd2260681" kindref="member">nux_error_t_invalid_outputs</ref><sp/>=<sp/>8,</highlight></codeline>
<codeline lineno="92" refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a86d8ecfc91eb52f6dcb05b674fc18f8e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a86d8ecfc91eb52f6dcb05b674fc18f8e" kindref="member">nux_error_t_get_task_failed</ref><sp/>=<sp/>9,</highlight></codeline>
<codeline lineno="96" refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a4bde5d51d7f7f1d68d84bfc3f79b5168" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a4bde5d51d7f7f1d68d84bfc3f79b5168" kindref="member">nux_error_t_dump_profile_failed</ref><sp/>=<sp/>10,</highlight></codeline>
<codeline lineno="100" refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a654f467bd6d8eae2cbf4830491ee5b36" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a654f467bd6d8eae2cbf4830491ee5b36" kindref="member">nux_error_t_queue_wait_timeout</ref><sp/>=<sp/>11,</highlight></codeline>
<codeline lineno="104" refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a14535aa4d38445a1bbcc92f5e6115d2a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a14535aa4d38445a1bbcc92f5e6115d2a" kindref="member">nux_error_t_queue_no_data</ref><sp/>=<sp/>12,</highlight></codeline>
<codeline lineno="108" refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a9822b7ab8a5770ab237a29211180f7f8" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a9822b7ab8a5770ab237a29211180f7f8" kindref="member">nux_error_t_incompatible_model</ref><sp/>=<sp/>13,</highlight></codeline>
<codeline lineno="112" refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a9f65448b07b3b88d40d94c60b1ad29b5" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a9f65448b07b3b88d40d94c60b1ad29b5" kindref="member">nux_error_t_compilation_failed</ref><sp/>=<sp/>14,</highlight></codeline>
<codeline lineno="116" refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03aff4cadf47af985723a53d8fe5f919116" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03aff4cadf47af985723a53d8fe5f919116" kindref="member">nux_error_t_internal_error</ref><sp/>=<sp/>15,</highlight></codeline>
<codeline lineno="120" refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a3302110dad3c6b57d35cb866540ee3d9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a3302110dad3c6b57d35cb866540ee3d9" kindref="member">nux_error_t_invalid_yaml</ref><sp/>=<sp/>16,</highlight></codeline>
<codeline lineno="124" refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03ac3ab8fc8951b8e4c786ea31578c37142" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03ac3ab8fc8951b8e4c786ea31578c37142" kindref="member">nux_error_t_incompatible_api_client_error</ref><sp/>=<sp/>17,</highlight></codeline>
<codeline lineno="128" refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03aa55655f1ae20a4025cc2e3b0fc08d548" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03aa55655f1ae20a4025cc2e3b0fc08d548" kindref="member">nux_error_t_api_client_init_failed</ref><sp/>=<sp/>18,</highlight></codeline>
<codeline lineno="132" refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a5046069a83eed49b221d31082ebcf22b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a5046069a83eed49b221d31082ebcf22b" kindref="member">nux_error_t_no_api_key</ref><sp/>=<sp/>19,</highlight></codeline>
<codeline lineno="136" refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a7ccdeba708b5a2946d3d1f0a621f30f4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03a7ccdeba708b5a2946d3d1f0a621f30f4" kindref="member">nux_error_t_null_pointer_exception</ref><sp/>=<sp/>20,</highlight></codeline>
<codeline lineno="137" refid="nux_8h_1ade952388e21da3a09cdcef180e1b8846" refkind="member"><highlight class="normal">}<sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BlockingSession<sp/>BlockingSession;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CompletionQueue_ContextPtr<sp/>CompletionQueue_ContextPtr;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Model<sp/>Model;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Nux<sp/>Nux;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">NuxModel<sp/>NuxModel;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">OpaqueTensor<sp/>OpaqueTensor;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SessionOptions<sp/>SessionOptions;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Submitter_ContextPtr<sp/>Submitter_ContextPtr;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Task<sp/>Task;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TaskModel<sp/>TaskModel;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TensorArray<sp/>TensorArray;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TensorDesc<sp/>TensorDesc;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="nux_8h_1a8aaa845d62c8e2ba0b08492ad4312b4a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Nux<sp/>*<ref refid="nux_8h_1a8aaa845d62c8e2ba0b08492ad4312b4a" kindref="member">nux_handle_t</ref>;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="nux_8h_1aed964c658135b64a4615538f6d3fe673" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uintptr_t<sp/><ref refid="nux_8h_1aed964c658135b64a4615538f6d3fe673" kindref="member">nux_buffer_len_t</ref>;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="nux_8h_1a2658304913df93888e11892bc40ea34f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Model<sp/>*<ref refid="nux_8h_1a2658304913df93888e11892bc40ea34f" kindref="member">nux_sync_model_t</ref>;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="nux_8h_1a94b4b218d26fecf1b1a4e3b102484b4c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">OpaqueTensor<sp/>*<ref refid="nux_8h_1a94b4b218d26fecf1b1a4e3b102484b4c" kindref="member">nux_tensor_t</ref>;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="nux_8h_1af81df491b6c3789d07e01f08a7bebca7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<ref refid="nux_8h_1af81df491b6c3789d07e01f08a7bebca7" kindref="member">nux_buffer_t</ref>;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uintptr_t<sp/>RequestId;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="nux_8h_1a85c8a2e016cba474b1d72a43be2658b8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>RequestId<sp/><ref refid="nux_8h_1a85c8a2e016cba474b1d72a43be2658b8" kindref="member">nux_request_id_t</ref>;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/>OutputIndex;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="nux_8h_1a2a467bd31283be58e2c7e1f081d39389" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>OutputIndex<sp/><ref refid="nux_8h_1a2a467bd31283be58e2c7e1f081d39389" kindref="member">nux_output_index_t</ref>;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="nux_8h_1a4bf21e12388c35aa93937f3ef11b2d58" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="nux_8h_1a4bf21e12388c35aa93937f3ef11b2d58" kindref="member">nux_output_callback_t</ref>)(<ref refid="nux_8h_1a85c8a2e016cba474b1d72a43be2658b8" kindref="member">nux_request_id_t</ref>,<sp/><ref refid="nux_8h_1a2a467bd31283be58e2c7e1f081d39389" kindref="member">nux_output_index_t</ref>,<sp/><ref refid="nux_8h_1af81df491b6c3789d07e01f08a7bebca7" kindref="member">nux_buffer_t</ref>,<sp/><ref refid="nux_8h_1aed964c658135b64a4615538f6d3fe673" kindref="member">nux_buffer_len_t</ref>);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="223" refid="nux_8h_1a1ef90898a20c09267ebb0cd6ba4bc005" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="nux_8h_1a1ef90898a20c09267ebb0cd6ba4bc005" kindref="member">nux_error_callback_t</ref>)(<ref refid="nux_8h_1a85c8a2e016cba474b1d72a43be2658b8" kindref="member">nux_request_id_t</ref>,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref>);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="231" refid="nux_8h_1ac59137484096663432e27c8e85d74eb4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="nux_8h_1ac59137484096663432e27c8e85d74eb4" kindref="member">nux_finish_callback_t</ref>)(<ref refid="nux_8h_1a85c8a2e016cba474b1d72a43be2658b8" kindref="member">nux_request_id_t</ref>);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="nux_8h_1a2a9df2cca7933d9a992ff02f18f7b32e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TaskModel<sp/>*<ref refid="nux_8h_1a2a9df2cca7933d9a992ff02f18f7b32e" kindref="member">nux_task_model_t</ref>;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="nux_8h_1acce67ab377db47043a0ae0f1e50e38e1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Task<sp/>*<ref refid="nux_8h_1acce67ab377db47043a0ae0f1e50e38e1" kindref="member">nux_task_t</ref>;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/>InputIndex;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="252" refid="nux_8h_1a7cb3fb8e947fec1309ec86fe1a5cfe9a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>InputIndex<sp/><ref refid="nux_8h_1a7cb3fb8e947fec1309ec86fe1a5cfe9a" kindref="member">nux_input_index_t</ref>;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="257" refid="nux_8h_1ad152e5d6c7a9d7057a1a39618f570043" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SessionOptions<sp/>*<ref refid="nux_8h_1ad152e5d6c7a9d7057a1a39618f570043" kindref="member">nux_session_option_t</ref>;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="nux_8h_1acd038b1ce951e25bc8e9d0e9b33393c8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BlockingSession<sp/>*<ref refid="nux_8h_1acd038b1ce951e25bc8e9d0e9b33393c8" kindref="member">nux_session_t</ref>;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="nux_8h_1afb640feeb31a1f4c6a7d0277d8767c36" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">NuxModel<sp/>*<ref refid="nux_8h_1afb640feeb31a1f4c6a7d0277d8767c36" kindref="member">nux_model_t</ref>;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TensorArray<sp/>*nux_tensor_array_t;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="nux_8h_1a2d592d21337f153b24799e8f565a7187" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Submitter_ContextPtr<sp/>*<ref refid="nux_8h_1a2d592d21337f153b24799e8f565a7187" kindref="member">nux_async_session_t</ref>;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CompletionQueue_ContextPtr<sp/>*nux_completion_queue_t;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="nux_8h_1af748dc0957775e74dde2c99baf34d19c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="nux_8h_1af748dc0957775e74dde2c99baf34d19c" kindref="member">nux_context_t</ref>;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283" refid="nux_8h_1a9df1cb134bb76b907cb3ba80412ffac6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TensorDesc<sp/>*nux_tensor_desc_t;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a371006fb2e9b32996c00702ebe110510" kindref="member">TensorDataType</ref><sp/><ref refid="nux_8h_1a9df1cb134bb76b907cb3ba80412ffac6" kindref="member">nux_tensor_dtype_t</ref>;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="297" refid="nux_8h_1aeb72e12ddb9ce47cdafb246b3cfbdd20" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="nux_8h_1aeb72e12ddb9ce47cdafb246b3cfbdd20" kindref="member">version</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="nux_8h_1ab1336033b102c9837ca990273ec6456d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="nux_8h_1ab1336033b102c9837ca990273ec6456d" kindref="member">git_short_hash</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="307" refid="nux_8h_1a8475134ef3cbbf41d0a2021edcbfa24b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="nux_8h_1a8475134ef3cbbf41d0a2021edcbfa24b" kindref="member">build_timestamp</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="312" refid="nux_8h_1a95c9321d77ff43a8873d1d86eeb5d3fa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a95c9321d77ff43a8873d1d86eeb5d3fa" kindref="member">enable_logging</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="317" refid="nux_8h_1ae68b58f43d3a93f6edf9d0c0bea56e6b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a861fc462f4f280975bb47edb7565a2c6" kindref="member">enable_furiosa_logging</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref><sp/><ref refid="nux_8h_1ae68b58f43d3a93f6edf9d0c0bea56e6b" kindref="member">create_nux</ref>(<ref refid="nux_8h_1a8aaa845d62c8e2ba0b08492ad4312b4a" kindref="member">nux_handle_t</ref><sp/>*nux);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="333" refid="nux_8h_1af85121c378e53e7c270015a79c0af782" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1af85121c378e53e7c270015a79c0af782" kindref="member">destroy_nux</ref>(<ref refid="nux_8h_1a8aaa845d62c8e2ba0b08492ad4312b4a" kindref="member">nux_handle_t</ref><sp/>nux);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref><sp/><ref refid="nux_8h_1a0a8c9bb5290414fa8c50a4225a41cd68" kindref="member">nux_create_sync_model</ref>(<ref refid="nux_8h_1a8aaa845d62c8e2ba0b08492ad4312b4a" kindref="member">nux_handle_t</ref><sp/>nux,</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*buffer,</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nux_8h_1aed964c658135b64a4615538f6d3fe673" kindref="member">nux_buffer_len_t</ref><sp/>len,</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nux_8h_1a2658304913df93888e11892bc40ea34f" kindref="member">nux_sync_model_t</ref><sp/>*model);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="357" refid="nux_8h_1a0f6a635eb4e6076213dceb64df4d03bc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a0f6a635eb4e6076213dceb64df4d03bc" kindref="member">destroy_sync_model</ref>(<ref refid="nux_8h_1a2658304913df93888e11892bc40ea34f" kindref="member">nux_sync_model_t</ref><sp/>model);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="368" refid="nux_8h_1ac1bf7db36e6dd35f73a41f4bec1be5d9" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="nux_8h_1ac1bf7db36e6dd35f73a41f4bec1be5d9" kindref="member">model_count_inputs</ref>(<ref refid="nux_8h_1a2658304913df93888e11892bc40ea34f" kindref="member">nux_sync_model_t</ref><sp/>model);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="379" refid="nux_8h_1ab007ff381c0e0dd9e72da5147af733ff" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="nux_8h_1ab007ff381c0e0dd9e72da5147af733ff" kindref="member">model_count_outputs</ref>(<ref refid="nux_8h_1a2658304913df93888e11892bc40ea34f" kindref="member">nux_sync_model_t</ref><sp/>model);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref><sp/><ref refid="nux_8h_1a80b727e0c054b2db830808b882f68305" kindref="member">model_input_tensor</ref>(<ref refid="nux_8h_1a2658304913df93888e11892bc40ea34f" kindref="member">nux_sync_model_t</ref><sp/>model,<sp/>uint32_t<sp/>index,<sp/><ref refid="nux_8h_1a94b4b218d26fecf1b1a4e3b102484b4c" kindref="member">nux_tensor_t</ref><sp/>*tensor);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref><sp/><ref refid="nux_8h_1af8a884f8271dddc703f18103a56157ba" kindref="member">model_output_tensor</ref>(<ref refid="nux_8h_1a2658304913df93888e11892bc40ea34f" kindref="member">nux_sync_model_t</ref><sp/>model,<sp/>uint32_t<sp/>index,<sp/><ref refid="nux_8h_1a94b4b218d26fecf1b1a4e3b102484b4c" kindref="member">nux_tensor_t</ref><sp/>*tensor);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref><sp/><ref refid="nux_8h_1aeb9dee222b8b07f4ae10e6e32b99301f" kindref="member">model_run</ref>(<ref refid="nux_8h_1a2658304913df93888e11892bc40ea34f" kindref="member">nux_sync_model_t</ref><sp/>model);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref><sp/><ref refid="nux_8h_1ac300486348c761b9bfa20cf614d06dca" kindref="member">tensor_get_buffer</ref>(<ref refid="nux_8h_1a94b4b218d26fecf1b1a4e3b102484b4c" kindref="member">nux_tensor_t</ref><sp/>tensor,<sp/><ref refid="nux_8h_1af81df491b6c3789d07e01f08a7bebca7" kindref="member">nux_buffer_t</ref><sp/>*buffer,<sp/><ref refid="nux_8h_1aed964c658135b64a4615538f6d3fe673" kindref="member">nux_buffer_len_t</ref><sp/>*len);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref><sp/><ref refid="nux_8h_1acb618caa33b7852140a4c7bf5cea3c93" kindref="member">tensor_fill_buffer</ref>(<ref refid="nux_8h_1a94b4b218d26fecf1b1a4e3b102484b4c" kindref="member">nux_tensor_t</ref><sp/>tensor,<sp/><ref refid="nux_8h_1af81df491b6c3789d07e01f08a7bebca7" kindref="member">nux_buffer_t</ref><sp/>buffer,<sp/><ref refid="nux_8h_1aed964c658135b64a4615538f6d3fe673" kindref="member">nux_buffer_len_t</ref><sp/>len);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref><sp/><ref refid="nux_8h_1a3139df500cc7640a1516cafae8f3818d" kindref="member">tensor_set_buffer</ref>(<ref refid="nux_8h_1a94b4b218d26fecf1b1a4e3b102484b4c" kindref="member">nux_tensor_t</ref><sp/>tensor,</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nux_8h_1af81df491b6c3789d07e01f08a7bebca7" kindref="member">nux_buffer_t</ref><sp/>buffer,</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nux_8h_1aed964c658135b64a4615538f6d3fe673" kindref="member">nux_buffer_len_t</ref><sp/>len,</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*free)(uint8_t*,<sp/>uintptr_t));</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref><sp/><ref refid="nux_8h_1a0842cc2b55b567e39a175b287690b833" kindref="member">nux_create_task_model</ref>(<ref refid="nux_8h_1a8aaa845d62c8e2ba0b08492ad4312b4a" kindref="member">nux_handle_t</ref><sp/>nux,</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*buffer,</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nux_8h_1aed964c658135b64a4615538f6d3fe673" kindref="member">nux_buffer_len_t</ref><sp/>len,</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>max_batch,</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nux_8h_1a4bf21e12388c35aa93937f3ef11b2d58" kindref="member">nux_output_callback_t</ref><sp/>output_callback,</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nux_8h_1a1ef90898a20c09267ebb0cd6ba4bc005" kindref="member">nux_error_callback_t</ref><sp/>error_callback,</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nux_8h_1ac59137484096663432e27c8e85d74eb4" kindref="member">nux_finish_callback_t</ref><sp/>finish_callback,</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nux_8h_1a2a9df2cca7933d9a992ff02f18f7b32e" kindref="member">nux_task_model_t</ref><sp/>*task_model);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="502" refid="nux_8h_1a7475a6df5e1c04159322b71d55979799" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a7475a6df5e1c04159322b71d55979799" kindref="member">destroy_task_model</ref>(<ref refid="nux_8h_1a2a9df2cca7933d9a992ff02f18f7b32e" kindref="member">nux_task_model_t</ref><sp/>task_model);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="509" refid="nux_8h_1a2a325d501f34c8d3047b17a5acd8f54c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a4c97ec2ec3df18d11981f050f1c66890" kindref="member">task_model_is_all_task_done</ref>(<ref refid="nux_8h_1a2a9df2cca7933d9a992ff02f18f7b32e" kindref="member">nux_task_model_t</ref><sp/>task_model);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref><sp/><ref refid="nux_8h_1a2a325d501f34c8d3047b17a5acd8f54c" kindref="member">task_model_get_task</ref>(<ref refid="nux_8h_1a2a9df2cca7933d9a992ff02f18f7b32e" kindref="member">nux_task_model_t</ref><sp/>task_model,<sp/><ref refid="nux_8h_1acce67ab377db47043a0ae0f1e50e38e1" kindref="member">nux_task_t</ref><sp/>*task);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref><sp/><ref refid="nux_8h_1a7c462db4b3b7d698d08585e84f39dce7" kindref="member">task_model_try_get_task</ref>(<ref refid="nux_8h_1a2a9df2cca7933d9a992ff02f18f7b32e" kindref="member">nux_task_model_t</ref><sp/>task_model,<sp/><ref refid="nux_8h_1acce67ab377db47043a0ae0f1e50e38e1" kindref="member">nux_task_t</ref><sp/>*task);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="544" refid="nux_8h_1a89552859a24b08529bf9e950cd8bb34b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a89552859a24b08529bf9e950cd8bb34b" kindref="member">destroy_task</ref>(<ref refid="nux_8h_1acce67ab377db47043a0ae0f1e50e38e1" kindref="member">nux_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref><sp/><ref refid="nux_8h_1af9d6c581a36012b468636777dd4eaca1" kindref="member">task_execute</ref>(<ref refid="nux_8h_1acce67ab377db47043a0ae0f1e50e38e1" kindref="member">nux_task_t</ref><sp/>task,<sp/><ref refid="nux_8h_1a85c8a2e016cba474b1d72a43be2658b8" kindref="member">nux_request_id_t</ref><sp/>request_id);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="576" refid="nux_8h_1ab33af2615cc40ef5c1f808e92844989a" refkind="member"><highlight class="normal"><ref refid="nux_8h_1af81df491b6c3789d07e01f08a7bebca7" kindref="member">nux_buffer_t</ref><sp/><ref refid="nux_8h_1ab33af2615cc40ef5c1f808e92844989a" kindref="member">task_input</ref>(<ref refid="nux_8h_1acce67ab377db47043a0ae0f1e50e38e1" kindref="member">nux_task_t</ref><sp/>task,<sp/><ref refid="nux_8h_1a7cb3fb8e947fec1309ec86fe1a5cfe9a" kindref="member">nux_input_index_t</ref><sp/>index);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="584" refid="nux_8h_1a5e21f23e53910367aedd397a9e48b8ec" refkind="member"><highlight class="normal"><ref refid="nux_8h_1aed964c658135b64a4615538f6d3fe673" kindref="member">nux_buffer_len_t</ref><sp/><ref refid="nux_8h_1a5e21f23e53910367aedd397a9e48b8ec" kindref="member">task_input_size</ref>(<ref refid="nux_8h_1acce67ab377db47043a0ae0f1e50e38e1" kindref="member">nux_task_t</ref><sp/>task,<sp/><ref refid="nux_8h_1a7cb3fb8e947fec1309ec86fe1a5cfe9a" kindref="member">nux_input_index_t</ref><sp/>index);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="593" refid="nux_8h_1abeefe6895d623679ae543a1dbab84010" refkind="member"><highlight class="normal"><ref refid="nux_8h_1ad152e5d6c7a9d7057a1a39618f570043" kindref="member">nux_session_option_t</ref><sp/><ref refid="nux_8h_1abeefe6895d623679ae543a1dbab84010" kindref="member">nux_session_option_create</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="603" refid="nux_8h_1ad11deaee86bd9a8423a9d095cf565021" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a5db104690c98286ffc4e68ea19938c5f" kindref="member">nux_session_option_set_device</ref>(<ref refid="nux_8h_1ad152e5d6c7a9d7057a1a39618f570043" kindref="member">nux_session_option_t</ref><sp/>builder,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*devname);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref><sp/><ref refid="nux_8h_1ad11deaee86bd9a8423a9d095cf565021" kindref="member">nux_session_option_set_compiler_config</ref>(<ref refid="nux_8h_1ad152e5d6c7a9d7057a1a39618f570043" kindref="member">nux_session_option_t</ref><sp/>option,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*yaml);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="620" refid="nux_8h_1a97d689454b4f62f8a200760002c3dc7f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a332899f8bd7d6719acf29b22b4c0a73a" kindref="member">nux_session_option_destroy</ref>(<ref refid="nux_8h_1ad152e5d6c7a9d7057a1a39618f570043" kindref="member">nux_session_option_t</ref><sp/>option);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref><sp/><ref refid="nux_8h_1a97d689454b4f62f8a200760002c3dc7f" kindref="member">nux_session_create</ref>(<ref refid="nux_8h_1af81df491b6c3789d07e01f08a7bebca7" kindref="member">nux_buffer_t</ref><sp/>model_binary,</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nux_8h_1aed964c658135b64a4615538f6d3fe673" kindref="member">nux_buffer_len_t</ref><sp/>model_binary_len,</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nux_8h_1ad152e5d6c7a9d7057a1a39618f570043" kindref="member">nux_session_option_t</ref><sp/>option,</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nux_8h_1acd038b1ce951e25bc8e9d0e9b33393c8" kindref="member">nux_session_t</ref><sp/>*out_sess);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="648" refid="nux_8h_1a724a23e737b3add5a339be1dc7128309" refkind="member"><highlight class="normal"><ref refid="nux_8h_1afb640feeb31a1f4c6a7d0277d8767c36" kindref="member">nux_model_t</ref><sp/><ref refid="nux_8h_1a724a23e737b3add5a339be1dc7128309" kindref="member">nux_session_get_model</ref>(<ref refid="nux_8h_1acd038b1ce951e25bc8e9d0e9b33393c8" kindref="member">nux_session_t</ref><sp/>sess);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref><sp/><ref refid="nux_8h_1a494a7c6cf86f81fd8fd9a7ec0386aa39" kindref="member">nux_session_run</ref>(<ref refid="nux_8h_1acd038b1ce951e25bc8e9d0e9b33393c8" kindref="member">nux_session_t</ref><sp/>sess,<sp/>nux_tensor_array_t<sp/>inputs,<sp/>nux_tensor_array_t<sp/>outputs);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="665" refid="nux_8h_1a6d8b4d876c425963ecbc1812504c1ce9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1ae2513c3ef496314bc17b638320fda5e5" kindref="member">nux_session_destroy</ref>(<ref refid="nux_8h_1acd038b1ce951e25bc8e9d0e9b33393c8" kindref="member">nux_session_t</ref><sp/>sess);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref><sp/><ref refid="nux_8h_1a6d8b4d876c425963ecbc1812504c1ce9" kindref="member">nux_async_session_create</ref>(<ref refid="nux_8h_1af81df491b6c3789d07e01f08a7bebca7" kindref="member">nux_buffer_t</ref><sp/>model_binary,</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nux_8h_1aed964c658135b64a4615538f6d3fe673" kindref="member">nux_buffer_len_t</ref><sp/>model_binary_len,</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nux_8h_1ad152e5d6c7a9d7057a1a39618f570043" kindref="member">nux_session_option_t</ref><sp/>option,</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nux_8h_1a2d592d21337f153b24799e8f565a7187" kindref="member">nux_async_session_t</ref><sp/>*out_sess,</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nux_completion_queue_t<sp/>*out_queue);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref><sp/><ref refid="nux_8h_1a908c99ce9bb71a2802ee07241e372080" kindref="member">nux_async_session_run</ref>(<ref refid="nux_8h_1a2d592d21337f153b24799e8f565a7187" kindref="member">nux_async_session_t</ref><sp/>sess,<sp/><ref refid="nux_8h_1af748dc0957775e74dde2c99baf34d19c" kindref="member">nux_context_t</ref><sp/>context,<sp/>nux_tensor_array_t<sp/>inputs);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="708" refid="nux_8h_1abcb841623cf8238c2317f8dd780e8870" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1abcb841623cf8238c2317f8dd780e8870" kindref="member">nux_completion_queue_next</ref>(nux_completion_queue_t<sp/>queue,</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nux_8h_1af748dc0957775e74dde2c99baf34d19c" kindref="member">nux_context_t</ref><sp/>*context,</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nux_tensor_array_t<sp/>*outputs,</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref><sp/>*error);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="719" refid="nux_8h_1a98249f0e276a29d6348f05a4befc1051" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a98249f0e276a29d6348f05a4befc1051" kindref="member">nux_completion_queue_try_next</ref>(nux_completion_queue_t<sp/>queue,</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nux_8h_1af748dc0957775e74dde2c99baf34d19c" kindref="member">nux_context_t</ref><sp/>*context,</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nux_tensor_array_t<sp/>*outputs,</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref><sp/>*error);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="729" refid="nux_8h_1a295f7c7c1016a88d4de27b4b99aa1b2c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a295f7c7c1016a88d4de27b4b99aa1b2c" kindref="member">nux_completion_queue_next_timeout</ref>(nux_completion_queue_t<sp/>queue,</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nux_8h_1af748dc0957775e74dde2c99baf34d19c" kindref="member">nux_context_t</ref><sp/>*context,</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nux_tensor_array_t<sp/>*outputs,</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a5f9e5f9dc6c0a6652d730ef3fc5fff03" kindref="member">nux_error_t</ref><sp/>*error,</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>timeout_millis);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="741" refid="nux_8h_1ab49cc0347c92073c07b89e48861a6f72" refkind="member"><highlight class="normal"><ref refid="nux_8h_1afb640feeb31a1f4c6a7d0277d8767c36" kindref="member">nux_model_t</ref><sp/><ref refid="nux_8h_1ab49cc0347c92073c07b89e48861a6f72" kindref="member">nux_async_session_get_model</ref>(<ref refid="nux_8h_1a2d592d21337f153b24799e8f565a7187" kindref="member">nux_async_session_t</ref><sp/>sess);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="746" refid="nux_8h_1a043d4d870e73c363828cb5e0ba370cbb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a043d4d870e73c363828cb5e0ba370cbb" kindref="member">nux_async_session_destroy</ref>(<ref refid="nux_8h_1a2d592d21337f153b24799e8f565a7187" kindref="member">nux_async_session_t</ref><sp/>sess);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="751" refid="nux_8h_1ae6423dec3527aa9abbb4a3945750ee00" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1ae6423dec3527aa9abbb4a3945750ee00" kindref="member">nux_completion_queue_destroy</ref>(nux_completion_queue_t<sp/>queue);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="756" refid="nux_8h_1a7738c91ae7d4034a54aae10593ee4252" refkind="member"><highlight class="normal">uintptr_t<sp/><ref refid="nux_8h_1a7738c91ae7d4034a54aae10593ee4252" kindref="member">nux_input_num</ref>(<ref refid="nux_8h_1afb640feeb31a1f4c6a7d0277d8767c36" kindref="member">nux_model_t</ref><sp/>model);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="761" refid="nux_8h_1ad66893954e82d78981d579b06e13f454" refkind="member"><highlight class="normal">uintptr_t<sp/><ref refid="nux_8h_1ad66893954e82d78981d579b06e13f454" kindref="member">nux_output_num</ref>(<ref refid="nux_8h_1afb640feeb31a1f4c6a7d0277d8767c36" kindref="member">nux_model_t</ref><sp/>model);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="766" refid="nux_8h_1a4cc5347337275a0bbc954dfb3216559f" refkind="member"><highlight class="normal">nux_tensor_desc_t<sp/><ref refid="nux_8h_1a4cc5347337275a0bbc954dfb3216559f" kindref="member">nux_input_desc</ref>(<ref refid="nux_8h_1afb640feeb31a1f4c6a7d0277d8767c36" kindref="member">nux_model_t</ref><sp/>model,<sp/>uintptr_t<sp/>index);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="771" refid="nux_8h_1a25c9372c2ad43ddf1224938ff7ebb33f" refkind="member"><highlight class="normal">nux_tensor_desc_t<sp/><ref refid="nux_8h_1a25c9372c2ad43ddf1224938ff7ebb33f" kindref="member">nux_output_desc</ref>(<ref refid="nux_8h_1afb640feeb31a1f4c6a7d0277d8767c36" kindref="member">nux_model_t</ref><sp/>model,<sp/>uintptr_t<sp/>index);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="776" refid="nux_8h_1a588e41922d4d06132d6c73448cd3dd48" refkind="member"><highlight class="normal">uintptr_t<sp/><ref refid="nux_8h_1a588e41922d4d06132d6c73448cd3dd48" kindref="member">nux_tensor_dim_num</ref>(nux_tensor_desc_t<sp/>tensor);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="781" refid="nux_8h_1a8a3f51dfe41b1b4c2c314bf587414f5b" refkind="member"><highlight class="normal">uintptr_t<sp/><ref refid="nux_8h_1af60676268150689a95be7ff4ee105317" kindref="member">nux_tensor_dim</ref>(nux_tensor_desc_t<sp/>tensor,<sp/>uintptr_t<sp/>index);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1ae3996976d8ffb3e58d88f58227473f8e" kindref="member">Axis</ref><sp/><ref refid="nux_8h_1a8a3f51dfe41b1b4c2c314bf587414f5b" kindref="member">nux_tensor_axis</ref>(nux_tensor_desc_t<sp/>tensor,<sp/>uintptr_t<sp/>idx);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="791" refid="nux_8h_1ad1ddec37b7e6944742790c0e84d54a72" refkind="member"><highlight class="normal"><ref refid="nux_8h_1a9df1cb134bb76b907cb3ba80412ffac6" kindref="member">nux_tensor_dtype_t</ref><sp/><ref refid="nux_8h_1ad1ddec37b7e6944742790c0e84d54a72" kindref="member">nux_tensor_dtype</ref>(nux_tensor_desc_t<sp/>tensor);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="796" refid="nux_8h_1a735e8fcd63ff8b8de0922ab95b123cda" refkind="member"><highlight class="normal">uintptr_t<sp/><ref refid="nux_8h_1a735e8fcd63ff8b8de0922ab95b123cda" kindref="member">nux_tensor_len</ref>(nux_tensor_desc_t<sp/>tensor);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="803" refid="nux_8h_1a1c5cc132c6c21aecb41a2b6a26fe94ea" refkind="member"><highlight class="normal">uintptr_t<sp/><ref refid="nux_8h_1a1c5cc132c6c21aecb41a2b6a26fe94ea" kindref="member">nux_tensor_size</ref>(nux_tensor_desc_t<sp/>tensor);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="810" refid="nux_8h_1a52d9d4fecc1262ce8ac6a457ecf1c820" refkind="member"><highlight class="normal"><ref refid="nux_8h_1a94b4b218d26fecf1b1a4e3b102484b4c" kindref="member">nux_tensor_t</ref><sp/><ref refid="nux_8h_1a52d9d4fecc1262ce8ac6a457ecf1c820" kindref="member">nux_tensor_create</ref>(nux_tensor_desc_t<sp/>desc);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="815" refid="nux_8h_1aab8f50d0285cc45c801e8575d2642ecf" refkind="member"><highlight class="normal"><ref refid="nux_8h_1a94b4b218d26fecf1b1a4e3b102484b4c" kindref="member">nux_tensor_t</ref><sp/><ref refid="nux_8h_1aab8f50d0285cc45c801e8575d2642ecf" kindref="member">nux_tensor_create_with_buffer</ref>(nux_tensor_desc_t<sp/>desc,</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nux_8h_1af81df491b6c3789d07e01f08a7bebca7" kindref="member">nux_buffer_t</ref><sp/>buffer,</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nux_8h_1aed964c658135b64a4615538f6d3fe673" kindref="member">nux_buffer_len_t</ref><sp/>len,</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*free)(uint8_t*,<sp/>uintptr_t));</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="823" refid="nux_8h_1a861a2381c6e005f98924888d88d9e4d4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a861a2381c6e005f98924888d88d9e4d4" kindref="member">nux_tensor_destroy</ref>(<ref refid="nux_8h_1a94b4b218d26fecf1b1a4e3b102484b4c" kindref="member">nux_tensor_t</ref><sp/>tensor);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="828" refid="nux_8h_1ad309d30bab0374303b7f99ebfb9ab525" refkind="member"><highlight class="normal">uint8_t<sp/>*<ref refid="nux_8h_1ad309d30bab0374303b7f99ebfb9ab525" kindref="member">nux_tensor_buffer</ref>(<ref refid="nux_8h_1a94b4b218d26fecf1b1a4e3b102484b4c" kindref="member">nux_tensor_t</ref><sp/>tensor);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="833" refid="nux_8h_1ab150b1e024176cba675bfab05335450c" refkind="member"><highlight class="normal">uintptr_t<sp/><ref refid="nux_8h_1ab150b1e024176cba675bfab05335450c" kindref="member">nux_tensor_buffer_size</ref>(<ref refid="nux_8h_1a94b4b218d26fecf1b1a4e3b102484b4c" kindref="member">nux_tensor_t</ref><sp/>tensor);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="840" refid="nux_8h_1a78e958bc1fdbcdf6d212bbf75bc0ab44" refkind="member"><highlight class="normal">nux_tensor_array_t<sp/><ref refid="nux_8h_1a78e958bc1fdbcdf6d212bbf75bc0ab44" kindref="member">nux_tensor_array_allocate_inputs</ref>(<ref refid="nux_8h_1afb640feeb31a1f4c6a7d0277d8767c36" kindref="member">nux_model_t</ref><sp/>model);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="847" refid="nux_8h_1a08c30289b7de1ee5cd2127eca182cfda" refkind="member"><highlight class="normal">nux_tensor_array_t<sp/><ref refid="nux_8h_1a08c30289b7de1ee5cd2127eca182cfda" kindref="member">nux_tensor_array_create_inputs</ref>(<ref refid="nux_8h_1afb640feeb31a1f4c6a7d0277d8767c36" kindref="member">nux_model_t</ref><sp/>model);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="852" refid="nux_8h_1a17d0ac22d9093471506f24b7f80b2237" refkind="member"><highlight class="normal">nux_tensor_array_t<sp/><ref refid="nux_8h_1a17d0ac22d9093471506f24b7f80b2237" kindref="member">nux_tensor_array_allocate_outputs</ref>(<ref refid="nux_8h_1afb640feeb31a1f4c6a7d0277d8767c36" kindref="member">nux_model_t</ref><sp/>model);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="857" refid="nux_8h_1a94b43022d166a595ed42e426eecec091" refkind="member"><highlight class="normal">nux_tensor_array_t<sp/><ref refid="nux_8h_1a94b43022d166a595ed42e426eecec091" kindref="member">nux_tensor_array_create_outputs</ref>(<ref refid="nux_8h_1afb640feeb31a1f4c6a7d0277d8767c36" kindref="member">nux_model_t</ref><sp/>model);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="862" refid="nux_8h_1a44b43c22f7168d71bb7629156a83bc02" refkind="member"><highlight class="normal"><ref refid="nux_8h_1a94b4b218d26fecf1b1a4e3b102484b4c" kindref="member">nux_tensor_t</ref><sp/><ref refid="nux_8h_1a44b43c22f7168d71bb7629156a83bc02" kindref="member">nux_tensor_array_get</ref>(nux_tensor_array_t<sp/>array,<sp/>uintptr_t<sp/>index);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="867" refid="nux_8h_1a51f366a3b8a2d537a25e947a7b7b6a30" refkind="member"><highlight class="normal">uintptr_t<sp/><ref refid="nux_8h_1a51f366a3b8a2d537a25e947a7b7b6a30" kindref="member">nux_tensor_array_len</ref>(nux_tensor_array_t<sp/>array);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="872" refid="nux_8h_1a5694060a448a96fab52667650312336b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nux_8h_1a5694060a448a96fab52667650312336b" kindref="member">nux_tensor_array_destroy</ref>(nux_tensor_array_t<sp/>array);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>extern<sp/>&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>furiosa_libnux_bindings_h<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/justi/Desktop/furiosaAI/furiosa-sdk/cpp/nux/nux.h"/>
  </compounddef>
</doxygen>
